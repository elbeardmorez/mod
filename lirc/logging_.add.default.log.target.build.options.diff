From b19eab442a739d920bf11599f429e32a2b34ac42 Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Fri, 15 Aug 2014 19:21:19 +0100
Subject: logging: add default log target build options

-add '--with-daemon-logging' and '--with-client-logging' build options
both defaulting to syslog on configure's vsyslog  discovery
-facilitates non-syslog logging by default if required
-facilitates natural split of daemon and client logging if required

-rebrand 'logfile' as 'logtarget' in light of syslog non-fd target
-remove ancient/unused LIRMAND defines
---
 configure.ac       | 36 ++++++++++++++++++++++++++++++++++--
 daemons/lircd.c    | 27 ++++++++++++++-------------
 lib/lirc_client.c  |  4 ++--
 lib/lirc_client.h  |  1 -
 lib/lirc_config1.h |  4 ----
 lib/lirc_config2.h |  3 ---
 lib/lirc_log.c     | 37 ++++++++++++++++++-------------------
 lib/lirc_log.h     |  6 +++---
 lirc_options.conf  |  2 +-
 tools/irexec.c     | 10 +++++-----
 tools/lircrcd.c    | 10 +++++-----
 11 files changed, 82 insertions(+), 58 deletions(-)

diff --git a/configure.ac b/configure.ac
index f8728ab..e260f5f 100644
--- a/configure.ac
+++ b/configure.ac
@@ -118,6 +118,14 @@ case "${host_os}" in
     ;;
 esac
 
+dnl logging defaults
+dnl # default log file namestargets
+log_daemon="lirc"
+log_client="lirc"
+dnl # default log targets
+logging_daemon_default=LOCALSTATEDIR\"/log/$log_daemon\"
+logging_client_default=LOCALSTATEDIR\"/log/$log_client\"
+
 # use fifo instead of devnode (required on mac os x)
 AM_CONDITIONAL(USE_FIFOS, test "$use_fifos" = "yes")
 
@@ -141,6 +149,12 @@ AH_TEMPLATE([PLUGINDIR],
 AH_TEMPLATE([DEVDIR],
         [device files directory])
 
+AH_TEMPLATE([LOGGING_DAEMON],
+        [The default daemon log target])
+
+AH_TEMPLATE([LOGGING_CLIENT],
+        [The default client log target])
+
 AH_TEMPLATE([DYNCODES],
         [Define to use dynamic IR codes])
 
@@ -192,8 +206,10 @@ AH_TEMPLATE([HAVE_SOUNDCARD],
 AH_TEMPLATE([HAVE_SYSTEMD],
         [defined if systemd API is available])
 
-AH_TEMPLATE([HAVE_VSYSLOG],
-        [define if you have vsyslog( prio, fmt, va_arg )])
+AC_CHECK_FUNC([vsyslog],
+        AC_DEFINE(HAVE_VSYSLOG)
+        [logging_daemon_default=\"syslog\";
+         logging_client_default=\"syslog\";],)
 
 AH_TEMPLATE([HW_DEFAULT],
         [The name of the hw_* structure to use by default])
@@ -372,6 +388,20 @@ AC_ARG_WITH(devdir,
 devdir=${withval},
 devdir=${devdir_default})
 
+AC_ARG_WITH(daemon_logging,
+[  --with-daemon-logging=TARGET  [log daemon messages to TARGET 'syslog' or file path
+                                [default=syslog (if available), LOCALSTATEDIR/log/lirc]]],
+test `basename ${withval}` == ${withval} &&
+  logging_daemon=LOCALSTATEDIR\"/log/${withval}\" || logging_daemon=\"${withval}\",
+logging_daemon=${logging_daemon_default})
+
+AC_ARG_WITH(client_logging,
+[  --with-client-logging=TARGET  [log client messages to TARGET 'syslog' or file path
+                                [default=syslog (if available), LOCALSTATEDIR/log/lirc]]],
+test `basename ${withval}` == ${withval} &&
+  logging_client=LOCALSTATEDIR\"/log/${withval}\" || logging_client=\"${withval}\",
+logging_client=${logging_client_default})
+
 AC_ARG_ENABLE(dyncodes,
 [  --enable-dyncodes       use dynamic codes],
 test x${enableval} = xyes && AC_DEFINE(DYNCODES))
@@ -401,6 +431,8 @@ AC_SUBST(usb_libs)
 
 dnl tell the C code what we decided
 AC_DEFINE_UNQUOTED(DEVDIR, "$devdir")
+AC_DEFINE_UNQUOTED(LOGGING_DAEMON, $logging_daemon)
+AC_DEFINE_UNQUOTED(LOGGING_CLIENT, $logging_client)
 AC_DEFINE_UNQUOTED(PACKAGE, "$PACKAGE")
 AC_DEFINE_UNQUOTED(VERSION, "$VERSION")
 AC_DEFINE_UNQUOTED(PLUGINDIR, "$libdir/lirc/plugins",[
diff --git a/daemons/lircd.c b/daemons/lircd.c
index 682405d..97cc70b 100644
--- a/daemons/lircd.c
+++ b/daemons/lircd.c
@@ -169,7 +169,6 @@ static __u32 repeat_max = REPEAT_MAX_DEFAULT;
 extern struct hardware hw;
 
 static const char *configfile = NULL;
-extern char *logfile ;
 extern const char *syslogident;
 static FILE *pidf;
 static const char *pidfile = PIDFILE;
@@ -215,7 +214,7 @@ static const char hostname[HOSTNAME_LEN + 1];
 
 extern FILE *lf;
 
-/* substract one for lirc, sockfd, sockinet, logfile, pidfile, uinput */
+/* subtract one for lirc, sockfd, sockinet, logtarget, pidfile, uinput */
 #define MAX_PEERS	((FD_SETSIZE-6)/2)
 #define MAX_CLIENTS     ((FD_SETSIZE-6)/2)
 
@@ -2131,7 +2130,7 @@ static const struct option lircd_options[] = {
 	{"output", required_argument, NULL, 'o'},
 	{"pidfile", required_argument, NULL, 'P'},
 	{"plugindir", required_argument, NULL, 'U'},
-	{"logfile", required_argument, NULL, 'L'},
+	{"logtarget", required_argument, NULL, 'L'},
 	{"debug", optional_argument, NULL, 'D'},
 	{"release", optional_argument, NULL, 'r'},
 	{"allow-simulate", no_argument, NULL, 'a'},
@@ -2158,8 +2157,10 @@ static void lircd_help(void)
 	printf("\t -c --connect=host[:port]\tconnect to remote lircd server\n");
 	printf("\t -o --output=socket\t\toutput socket filename\n");
 	printf("\t -P --pidfile=file\t\tdaemon pid file\n");
-	printf("\t -L --logfile=file\t\tlog file path or 'syslog'\n");
-	printf("\t -D[X] --debug[=X]\t\tenable log, optional verbosity level 1..10\n");
+	printf("\t -L --logtarget=target\t\t'syslog' or a file path "
+	       "[default: %s]\n", LOGGING_DAEMON);
+	printf("\t -D[X] --debug[=X]\t\tenable log, optional verbosity level 1..10 "
+	       "[default: 1]\n");
 	printf("\t -r --release[=suffix]\t\tauto-generate release events\n");
 	printf("\t -a --allow-simulate\t\taccept SIMULATE command\n");
 #       if defined(__linux__)
@@ -2180,7 +2181,7 @@ static void lircd_add_defaults(void)
 		"lircd:connect", 	NULL,
 		"lircd:lircdfile", 	LIRCD,
 		"lircd:pidfile", 	PIDFILE,
-		"lircd:logfile", 	LOGFILE,
+		"lircd:logtarget", 	LOGGING_DAEMON,
 		"lircd:debug", 		"False",
 		"lircd:release", 	NULL,
 		"lircd:allow-simulate", "False",
@@ -2232,7 +2233,7 @@ static void lircd_parse_options(int argc, char** argv)
 			options_set_opt("lircd:pidfile", optarg);
 			break;
 		case 'L':
-			options_set_opt("lircd:logfile", optarg);
+			options_set_opt("lircd:logtarget", optarg);
 			break;
 		case 'o':
 			options_set_opt("lircd:lircdfile", optarg);
@@ -2294,15 +2295,15 @@ int main(int argc, char **argv)
 	/* set default options */
 	lircd_add_defaults();
 	/* set up default logging */
-	/* catch 'pre-log' messages in LOGFILE*/
-	lirc_set_logfile(options_getstring("lircd:logfile"));
+	/* catch 'pre-log' messages in LOGGING_DAEMON*/
+	lirc_set_logtarget(options_getstring("lircd:logtarget"));
 	lirc_log_open("lircd", 0, LOG_INFO);
 	/* set command line and file options */
 	options_load(argc, argv, NULL, lircd_parse_options);
-	if (strcmp(lirc_get_logfile(), options_getstring("lircd:logfile")) != 0) {
+	if (strcmp(lirc_get_logtarget(), options_getstring("lircd:logtarget")) != 0) {
 		/* update log file location */
 		lirc_log_close();
-		lirc_set_logfile(options_getstring("lircd:logfile"));
+		lirc_set_logtarget(options_getstring("lircd:logtarget"));
 		lirc_log_open("lircd", 0, LOG_INFO);
 	}
 	/* update log level */
@@ -2329,9 +2330,9 @@ int main(int argc, char **argv)
 		device = opt;
 	pidfile = options_getstring("lircd:pidfile");
 	lircdfile = options_getstring("lircd:lircdfile");
-	opt = options_getstring("lircd:logfile");
+	opt = options_getstring("lircd:logtarget");
 	if (opt != NULL)
-		lirc_set_logfile(opt);
+		lirc_set_logtarget(opt);
 	if (options_getstring("lircd:listen") != NULL){
 		listen_tcpip = 1;
 		opt = options_getstring("lircd:listen_hostport");
diff --git a/lib/lirc_client.c b/lib/lirc_client.c
index 5e2c9c4..6125928 100644
--- a/lib/lirc_client.c
+++ b/lib/lirc_client.c
@@ -122,7 +122,7 @@ int lirc_init_wopt(const char *optprefix)
 		options_name(lirc_option, optprefix, "name"), optprefix,
 		options_name(lirc_option, optprefix, "debug"), 0,
 		options_name(lirc_option, optprefix, "socket"), LIRCD,
-		options_name(lirc_option, optprefix, "logfile"), LOGFILE,
+		options_name(lirc_option, optprefix, "logtarget"), LOGGING_CLIENT,
 		(const char*)NULL, (const char*)NULL
 	};
 	lirc_opt_add_defaults(defaults);
@@ -130,7 +130,7 @@ int lirc_init_wopt(const char *optprefix)
 	lirc_prog =
 		strdup(options_getstring(options_name(lirc_option, optprefix, "name")));
 	/* ensure logging */
-	lirc_set_logfile(options_getstring(options_name(lirc_option, optprefix, "logfile")));
+	lirc_set_logtarget(options_getstring(options_name(lirc_option, optprefix, "logtarget")));
 	lirc_log_open(options_getstring(options_name(lirc_option, optprefix, "name")), 0,
 	              options_getint(options_name(lirc_option, optprefix, "debug")));
 	/* connect to lircd */
diff --git a/lib/lirc_client.h b/lib/lirc_client.h
index 6547ed0..dbb7929 100644
--- a/lib/lirc_client.h
+++ b/lib/lirc_client.h
@@ -15,7 +15,6 @@
 
 #include <stddef.h>
 #include <stdint.h>
-#include <syslog.h>
 
 #ifndef __u32
 typedef uint32_t __u32;
diff --git a/lib/lirc_config1.h b/lib/lirc_config1.h
index 258b92a..5f2cf1a 100644
--- a/lib/lirc_config1.h
+++ b/lib/lirc_config1.h
@@ -14,10 +14,6 @@
 /* config file names - beneath $HOME or SYSCONFDIR */
 #define CFG_LIRCRC      "lircrc"
 
-/* log files */
-#define LOG_LIRCD       "lircd"
-#define LOG_LIRMAND     "lirmand"
-
 /* pid file */
 #define PID_LIRCD       "lircd.pid"
 
diff --git a/lib/lirc_config2.h b/lib/lirc_config2.h
index 7380b44..c628cec 100644
--- a/lib/lirc_config2.h
+++ b/lib/lirc_config2.h
@@ -18,9 +18,6 @@
 #define LIRCRC_ROOT_FILE        SYSCONFDIR "/" PACKAGE "/" CFG_LIRCRC
 #define LIRCRC_OLD_ROOT_FILE    SYSCONFDIR "/" CFG_LIRCRC
 
-#define LOGFILE                 LOCALSTATEDIR "/log/" LOG_LIRCD
-#define LIRMAND_LOGFILE         LOCALSTATEDIR "/log/" LOG_LIRMAND
-
 #define PIDFILE                 VARRUNDIR "/" PACKAGE "/" PID_LIRCD
 
 #define LIRC_RELEASE_SUFFIX     "_UP"
diff --git a/lib/lirc_log.c b/lib/lirc_log.c
index 1a9a08e..f5b8729 100644
--- a/lib/lirc_log.c
+++ b/lib/lirc_log.c
@@ -47,7 +47,7 @@ static int use_syslog = 1;
 static int nodaemon = 0;
 char* progname = NULL;
 char *syslogident = NULL;
-char *logfile = NULL;
+char *logtarget = NULL;
 
 static int log_enabled = 0;
 
@@ -73,19 +73,18 @@ int lirc_log_use_syslog()
 }
 
 
-void lirc_set_logfile(char* s)
+void lirc_set_logtarget(char* s)
 {
-	if (strcmp(s, "syslog") == 0) {
+	logtarget = realloc(logtarget, strlen(s) + 1);
+	strcpy(logtarget, s);
+	if (strcmp(s, "syslog") == 0)
 		use_syslog = 1;
-	} else {
-		logfile = realloc(logfile, strlen(s) + 1);
-		strcpy(logfile, s);
+	else
 		use_syslog = 0;
-	}
 }
 
-char* lirc_get_logfile() {
-	return logfile;
+char* lirc_get_logtarget() {
+	return logtarget;
 }
 
 int lirc_log_open(const char* _progname, int _nodaemon, int _debug)
@@ -104,14 +103,14 @@ int lirc_log_open(const char* _progname, int _nodaemon, int _debug)
 			openlog(syslogident, LOG_CONS | LOG_PID, LOG_LOCAL0);
 		}
 	} else {
-		if (logfile == NULL) {
+		if (logtarget == NULL) {
 			fprintf(stderr, "%s: log file not set\n", progname);
 			perror(progname);
 			return 1;
 		}
-		lf = fopen(logfile, "a");
+		lf = fopen(logtarget, "a");
 		if (lf == NULL) {
-			fprintf(stderr, "%s: could not open logfile %s\n", progname, logfile);
+			fprintf(stderr, "%s: could not open log file %s\n", progname, logtarget);
 			perror(progname);
 			return 1;
 		}
@@ -126,8 +125,8 @@ int lirc_log_deinit()
 	lirc_log_close();
 	free(syslogident);
 	syslogident = NULL;
-	free(logfile);
-	logfile = NULL;
+	free(logtarget);
+	logtarget = NULL;
 	free(progname);
 	progname = NULL;
 	return 0;
@@ -135,14 +134,14 @@ int lirc_log_deinit()
 
 int lirc_log_close()
 {
-	logprintf(LOG_INFO, "closing logfile");
+	logprintf(LOG_INFO, "closing log");
 	if (use_syslog){
 		closelog();
 		return(0);
 	} else if (lf) {
 		struct stat s;
 		if (-1 == fstat(fileno(lf), &s)) {
-			perror("Invalid logfile!");
+			perror("invalid log file!");
 			return -1;
 		}
 		return(fclose(lf));
@@ -160,13 +159,13 @@ int lirc_log_reopen(void)
 		return -1;
 	struct stat s;
 	fstat(fileno(lf), &s);
-	lf = fopen(logfile, "a");
+	lf = fopen(logtarget, "a");
 	if (lf == NULL) {
 		/* can't print any error messagees */
-		perror("Can't open logfile");
+		perror("cannot open log file");
 		return -1;
 	}
-	logprintf(LOG_INFO, "reopened logfile");
+	logprintf(LOG_INFO, "reopened log file");
 	if (-1 == fchmod(fileno(lf), s.st_mode)) {
 		logprintf(LOG_WARNING, "could not set file permissions");
 		logperror(LOG_WARNING, NULL);
diff --git a/lib/lirc_log.h b/lib/lirc_log.h
index 86eaf58..1c0ecfa 100644
--- a/lib/lirc_log.h
+++ b/lib/lirc_log.h
@@ -81,11 +81,11 @@ int lirc_log_open(const char* progname, int _nodaemon, int _debug);
 void log_enable(int enabled);
 
 /*
- * Set logfile. Either a regular path or the string 'suslog'; the latter
+ * Set log target. Either a regular path or the string 'syslog'; the latter
  * does indeed use syslog(1) instead.
  * */
-void lirc_set_logfile(char* s);
-char* lirc_get_logfile();
+void lirc_set_logtarget(char* s);
+char* lirc_get_logtarget();
 
 /*
  * Close log file if applicable and clean up local variables.
diff --git a/lirc_options.conf b/lirc_options.conf
index d8ddedd..2791f22 100644
--- a/lirc_options.conf
+++ b/lirc_options.conf
@@ -17,7 +17,7 @@ repeat-max      = 600
 #debug          = 5
 #uinput         = ...
 #release        = ...
-#logfile        = ...
+#logtarget      = syslog
 
 [lircmd]
 uinput          = False
diff --git a/tools/irexec.c b/tools/irexec.c
index 5642d72..013e110 100644
--- a/tools/irexec.c
+++ b/tools/irexec.c
@@ -36,7 +36,7 @@ int main(int argc, char *argv[])
 		"irexec:daemon", 	"False",
 		"irexec:name", 		progname,
 		"irexec:socket", 	LIRCD,
-		"irexec:logfile", 	LOGFILE,
+		"irexec:logtarget", 	LOGGING_CLIENT,
 		"irexec:debug", 	"False",
 		(const char*)NULL, 	(const char*)NULL
 	};
@@ -48,7 +48,7 @@ int main(int argc, char *argv[])
 		{"daemon", no_argument, NULL, 'd'},
 		{"name", required_argument, NULL, 'n'},
 		{"socket", required_argument, NULL, 's'},
-		{"logfile", required_argument, NULL, 'L'},
+		{"logtarget", required_argument, NULL, 'L'},
 		{"debug", optional_argument, NULL, 'D'},
 		{0, 0, 0, 0}
 	};
@@ -67,8 +67,8 @@ int main(int argc, char *argv[])
 			       "[default: %s]\n", progname);
 			printf("\t -s --socket=SOCKET\tlircd socket filename "
 			       "[default: %s]\n", LIRCD);
-			printf("\t -L --logfile=FILE\tclient log filename "
-             "[default: %s]\n", LOGFILE);
+			printf("\t -L --logtarget=target\t'syslog' or a file path "
+             "[default: %s]\n", LOGGING_CLIENT);
 			printf("\t -D[X] --debug[=X]\tenable log, optional verbosity level 1..10 "
 			       "[default: 1]\n");
 			return (EXIT_SUCCESS);
@@ -85,7 +85,7 @@ int main(int argc, char *argv[])
 			lirc_opt_set("irexec:socket", optarg);
 			break;
 		case 'L':
-			lirc_opt_set("irexec:logfile", optarg);
+			lirc_opt_set("irexec:logtarget", optarg);
 			break;
 		case 'D':
 			lirc_opt_set("irexec:debug", optarg ? optarg : "1");
diff --git a/tools/lircrcd.c b/tools/lircrcd.c
index a66817e..3cb3ea0 100644
--- a/tools/lircrcd.c
+++ b/tools/lircrcd.c
@@ -799,7 +799,7 @@ int main(int argc, char **argv)
 	const char* const defaults[] = {
 		"lircrcd:name", 		progname,
 		"lircrcd:socket", 	LIRCD,
-		"lircrcd:logfile", 	LOGFILE,
+		"lircrcd:logtarget", 	LOGGING_CLIENT,
 		"lircrcd:debug", 	"False",
 		(const char*)NULL, 	(const char*)NULL
 	};
@@ -811,7 +811,7 @@ int main(int argc, char **argv)
 		{"permission", required_argument, NULL, 'p'},
 		{"output", required_argument, NULL, 'o'},
 		{"socket", required_argument, NULL, 's'},
-		{"logfile", required_argument, NULL, 'L'},
+		{"logtarget", required_argument, NULL, 'L'},
 		{"debug", optional_argument, NULL, 'D'},
 		{0, 0, 0, 0}
 	};
@@ -831,8 +831,8 @@ int main(int argc, char **argv)
 			       "[default: %s/%sd]\n", getenv("HOME"), LIRCRC_USER_FILE);
 			printf("\t -s --socket=SOCKET\tlircd socket filename "
 			       "[default: %s]\n", LIRCD);
-			printf("\t -L --logfile=FILE\tclient log filename "
-			       "[default: %s]\n", LOGFILE);
+			printf("\t -L --logtarget=target\t'syslog' or a file path "
+			       "[default: %s]\n", LOGGING_CLIENT);
 			printf("\t -D[X] --debug[=X]\tenable log, optional verbosity level 1..10 "
 			       "[default: 1]\n");
 			return (EXIT_SUCCESS);
@@ -853,7 +853,7 @@ int main(int argc, char **argv)
 			lirc_opt_set("lircrcd:socket", optarg);
 			break;
 		case 'L':
-			lirc_opt_set("lircrcd:logfile", optarg);
+			lirc_opt_set("lircrcd:logtarget", optarg);
 			break;
 		case 'D':
 			lirc_opt_set("lircrcd:debug", optarg ? optarg : "1");
-- 
1.8.4

