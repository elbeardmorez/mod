From c1e1e928a4bfc2d7ea04ec43232fb7b4ba048e2a Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Tue, 5 Aug 2014 09:24:04 +0100
Subject: lirc_options, dictionary and ciniparser usability

-ensure existing options exist post ciniparser_load
-meaningful return value for dictionary_del
-only ever allocate lirc_options dict if NULL
-allow option_set to create the new global dictionary, supporting

  if (socket)
     lirc_opt_set("client.app:socket", socket);
  lircdfd = lirc_init_wopt("client.app")

alternative lircd socket location creation
-update a few doc strings
---
 lib/ciniparser.c   | 34 +++++++++++++++++++++-------------
 lib/ciniparser.h   | 16 ++++++++--------
 lib/dictionary.c   |  6 +++---
 lib/dictionary.h   |  7 ++++---
 lib/lirc_options.c | 18 ++++++++++--------
 lib/lirc_options.h |  4 ++--
 6 files changed, 48 insertions(+), 37 deletions(-)

diff --git a/lib/ciniparser.c b/lib/ciniparser.c
index 8547075..29ae737 100644
--- a/lib/ciniparser.c
+++ b/lib/ciniparser.c
@@ -373,7 +373,7 @@ void ciniparser_unset(dictionary *ini, char *entry)
 	dictionary_unset(ini, strlwc(entry));
 }
 
-dictionary *ciniparser_load(const char *ininame)
+int ciniparser_load(dictionary *dict, const char *ininame)
 {
 	FILE *in;
 	char line[ASCIILINESZ+1];
@@ -382,18 +382,21 @@ dictionary *ciniparser_load(const char *ininame)
 	char tmp[ASCIILINESZ+1];
 	char val[ASCIILINESZ+1];
 	int  last = 0, len, lineno = 0, errs = 0;
-	dictionary *dict;
+	int dictnew = 0;
 
 	if ((in = fopen(ininame, "r")) == NULL) {
 		fprintf(stderr, "ciniparser: cannot open %s\n (ignored)",
                         ininame);
-		return NULL;
+		return 1;
 	}
 
-	dict = dictionary_new(0);
 	if (!dict) {
-		fclose(in);
-		return NULL;
+		dict = dictionary_new(0);
+		if (!dict) {
+			fclose(in);
+			return 1;
+		}
+		dictnew = 1;
 	}
 
 	memset(line, 0, ASCIILINESZ + 1);
@@ -411,9 +414,12 @@ dictionary *ciniparser_load(const char *ininame)
 					"ciniparser: input line too long in %s (%d)\n",
 					ininame,
 					lineno);
-			dictionary_del(dict);
+			if (dictnew) {
+				dictionary_del(dict);
+				dict = NULL;
+			}
 			fclose(in);
-			return NULL;
+			return 1;
 		}
 
 		/* Get rid of \n and spaces at end of line */
@@ -463,18 +469,20 @@ dictionary *ciniparser_load(const char *ininame)
 	}
 
 	if (errs) {
-		dictionary_del(dict);
-		dict = NULL;
+		if (dictnew) {
+			dictionary_del(dict);
+			dict = NULL;
+		}
 	}
 
 	fclose(in);
 
-	return dict;
+	return 0;
 }
 
-void ciniparser_freedict(dictionary *d)
+int ciniparser_freedict(dictionary *d)
 {
-	dictionary_del(d);
+	return dictionary_del(d);
 }
 
 /** @}
diff --git a/lib/ciniparser.h b/lib/ciniparser.h
index f61b357..4d07467 100644
--- a/lib/ciniparser.h
+++ b/lib/ciniparser.h
@@ -221,36 +221,36 @@ void ciniparser_unset(dictionary *ini, char *entry);
 int ciniparser_find_entry(dictionary *ini, char *entry) ;
 
 /**
- * @brief    Parse an ini file and return an allocated dictionary object
+ * @brief    Parse an ini file adding to an allocated dictionary object
+ * @param    Pointer to a dictionary object or NULL
  * @param    ininame Name of the ini file to read.
- * @return   Pointer to newly allocated dictionary
+ * @return   0 success, 1 errors
  *
  * This is the parser for ini files. This function is called, providing
  * the name of the file to be read. It returns a dictionary object that
  * should not be accessed directly, but through accessor functions
  * instead.
  *
- * The returned dictionary must be freed using ciniparser_freedict().
  */
-dictionary *ciniparser_load(const char *ininame);
+int ciniparser_load(dictionary *dict, const char *ininame);
 
 /**
  * @brief    Free all memory associated to an ini dictionary
  * @param    d Dictionary to free
- * @return   void
+ * @return   0 success, 1 errors
  *
  * Free all memory associated to an ini dictionary.
  * It is mandatory to call this function before the dictionary object
  * gets out of the current context.
  */
-void ciniparser_freedict(dictionary *d);
+int ciniparser_freedict(dictionary *d);
 
 /**
  * @brief Set an item in the dictionary
- * @param d      Dictionary object created by ciniparser_load()
+ * @param d      Dictionary object
  * @param entry  Entry in the dictionary to manipulate
  * @param val    Value to assign to the entry
- * @return       0 on success, -1 on error
+ * @return       0 success, 1 errors
  *
  * Remember that string values are converted by ciniparser_getboolean(),
  * ciniparser_getdouble(), etc. It is also OK to set an entry to NULL.
diff --git a/lib/dictionary.c b/lib/dictionary.c
index 4b24fb0..8d6ab12 100644
--- a/lib/dictionary.c
+++ b/lib/dictionary.c
@@ -107,12 +107,12 @@ dictionary *dictionary_new(int size)
 	return d;
 }
 
-void dictionary_del(dictionary *d)
+int dictionary_del(dictionary *d)
 {
 	int i;
 
 	if (d == NULL)
-		return;
+		return 0;
 	for (i = 0; i < d->size; i++) {
 		if (d->key[i] != NULL)
 			free(d->key[i]);
@@ -123,7 +123,7 @@ void dictionary_del(dictionary *d)
 	free(d->key);
 	free(d->hash);
 	free(d);
-	return;
+	return 0;
 }
 
 char *dictionary_get(dictionary *d, char *key, char *def)
diff --git a/lib/dictionary.h b/lib/dictionary.h
index f831e39..00d3aba 100644
--- a/lib/dictionary.h
+++ b/lib/dictionary.h
@@ -81,7 +81,8 @@ unsigned dictionary_hash(char *key);
 /**
  * @brief Create a new dictionary object.
  * @param size Optional initial size of the dictionary.
- * @return allocated dictionary object on success, NULL on failure
+ *
+ @return allocated dictionary object on success, NULL on failure
  *
  * This function allocates a new dictionary object of given size and returns
  * it. If you do not know in advance (roughly) the number of entries in the
@@ -92,11 +93,11 @@ dictionary *dictionary_new(int size);
 /**
  * @brief Delete a dictionary object
  * @param d dictionary object to deallocate.
- * @return void
+ * @return 0 success
  *
  * Deallocate a dictionary object and all memory associated to it.
  */
-void dictionary_del(dictionary *vd);
+int dictionary_del(dictionary *vd);
 
 /**
  * @brief Get a value from a dictionary.
diff --git a/lib/lirc_options.c b/lib/lirc_options.c
index 56da7c3..eb9d55d 100644
--- a/lib/lirc_options.c
+++ b/lib/lirc_options.c
@@ -26,6 +26,8 @@ static int depth = 0;
 
 void options_set_opt(char* key, char* value)
 {
+	if (lirc_options == NULL)
+		lirc_options = dictionary_new(0);
 	if (dictionary_set(lirc_options, key, value) != 0)
 		logprintf(LOG_WARNING,
 			  "Cannot set option %s to %s\n", key, value);
@@ -73,17 +75,17 @@ void options_load(int argc, char** argv,
 		path = buff;
 	}
 	if (access(path, R_OK) == 0) {
-		lirc_options = ciniparser_load(path);
-		if (lirc_options == NULL) {
+		if (ciniparser_load(lirc_options, path) != 0)
 			logprintf(LOG_WARNING,
-				 "Cannot load options file %s\n", path);
+				"Cannot load options file %s\n", path);
+		if (lirc_options == NULL)
+			lirc_options = dictionary_new(0);
+	}
+	else {
+		logprintf(LOG_WARNING, "cannot open %s\n", path);
+		if (lirc_options == NULL)
 			lirc_options = dictionary_new(0);
-		}
 	}
-        else {
-		logprintf(LOG_WARNING, "Warning: cannot open %s\n", path);
-		lirc_options = dictionary_new(0);
-        }
 	parse_options(argc, argv);
 #	ifdef DEBUG
 	if (debug && lirc_options != NULL ) {
diff --git a/lib/lirc_options.h b/lib/lirc_options.h
index 2b39fe1..ad1e95e 100644
--- a/lib/lirc_options.h
+++ b/lib/lirc_options.h
@@ -44,11 +44,11 @@ char* options_name(char* target, const char* prefix, const char* option);
  *      - argc, argv; As handled to main()
  *      - options-file: Path to options file. If NULL, the default one
  *        will be used.
- *      - options_load: Function called as options_load(argc, argv, path).
+ *      - parse_options: Function called as parse_options(argc, argv, path).
  *        argc and argv are as given to options_init; path is the absolute
  *        path to the configuration file.
  *
  */
 void options_load(int argc, char **argv,
 		  const char* options_file,
-		  void (*options_load)(int, char**));
+		  void (*parse_options)(int, char**));
-- 
1.8.4

