From 5be99cce785008c47c1229243664086cd6c02303 Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Wed, 6 Aug 2014 20:51:33 +0100
Subject: convert lirc_client print calls to new format

---
 lib/lirc_client.c | 162 +++++++++++++++++++++++++-----------------------------
 1 file changed, 74 insertions(+), 88 deletions(-)

diff --git a/lib/lirc_client.c b/lib/lirc_client.c
index 082aa94..2d65097 100644
--- a/lib/lirc_client.c
+++ b/lib/lirc_client.c
@@ -59,8 +59,6 @@ enum packet_state {
 };
 
 /* internal functions */
-static void lirc_printf(char *format_str, ...);
-static void lirc_perror(const char *s);
 static int lirc_readline(char **line, FILE * f);
 static char *lirc_trim(char *s);
 static char lirc_parse_escape(char **s, const char *name, int line);
@@ -100,18 +98,6 @@ static char *lirc_prog = NULL;
 static char *lirc_buffer = NULL;
 char *lirc_option = NULL;
 
-static void lirc_printf(char *format_str, ...)
-{
-	va_list ap;
-	va_start(ap, format_str);
-	logprintfva(LOG_INFO, format_str, ap);
-	va_end(ap);
-}
-static void lirc_perror(const char *s)
-{
-	logperror(LOG_ERR, s);
-}
-
 int lirc_init(char *prog, int verbose) {
 	if (lirc_options == NULL)
 		lirc_options = dictionary_new(0);
@@ -127,7 +113,7 @@ int lirc_init(char *prog, int verbose) {
 int lirc_init_wopt(const char *optprefix)
 {
 	if (optprefix == NULL) {
-		fprintf(stderr, "no program name specified for options prefix");
+		fprintf(stderr, "no program name specified for options prefix\n");
 		return (-1);
 	}
 
@@ -157,7 +143,7 @@ int lirc_init_wopt(const char *optprefix)
 	lirc_lircd = socket(AF_UNIX, SOCK_STREAM, 0);
 	if (lirc_lircd == -1) {
 		lirc_log(LOG_ERR, "could not open socket");
-		lirc_log_err(LOG_ERR, "");
+		lirc_log_err(LOG_ERR, NULL);
 		lirc_log_deinit();
 		free(lirc_prog);
 		lirc_prog = NULL;
@@ -201,7 +187,7 @@ static int lirc_readline(char **line, FILE * f)
 
 	newline = (char *)malloc(LIRC_READ + 1);
 	if (newline == NULL) {
-		lirc_printf("%s: out of memory\n", lirc_prog);
+		lirc_log(LOG_ERR, "out of memory");
 		return (-1);
 	}
 	len = 0;
@@ -226,7 +212,7 @@ static int lirc_readline(char **line, FILE * f)
 		enlargeline = (char *)realloc(newline, len + 1 + LIRC_READ);
 		if (enlargeline == NULL) {
 			free(newline);
-			lirc_printf("%s: out of memory\n", lirc_prog);
+			lirc_log(LOG_ERR, "out of memory");
 			return (-1);
 		}
 		newline = enlargeline;
@@ -308,7 +294,7 @@ static char lirc_parse_escape(char **s, const char *name, int line)
 		}
 		if (i > (1 << CHAR_BIT) - 1) {
 			i &= (1 << CHAR_BIT) - 1;
-			lirc_printf("%s: octal escape sequence out of range in %s:%d\n", lirc_prog, name, line);
+			lirc_log(LOG_NOTICE, "octal escape sequence out of range in %s:%d", name, line);
 		}
 		return ((char)i);
 	case 'x':
@@ -333,13 +319,13 @@ static char lirc_parse_escape(char **s, const char *name, int line)
 				digits_found = 1;
 			}
 			if (!digits_found) {
-				lirc_printf("%s: \\x used with no "
-					    "following hex digits in %s:%d\n", lirc_prog, name, line);
+				lirc_log(LOG_NOTICE, "\\x used with no "
+					    "following hex digits in %s:%d", name, line);
 			}
 			if (overflow || i > (1 << CHAR_BIT) - 1) {
 				i &= (1 << CHAR_BIT) - 1;
-				lirc_printf("%s: hex escape sequence out "
-					    "of range in %s:%d\n", lirc_prog, name, line);
+				lirc_log(LOG_NOTICE, "hex escape sequence out "
+					    "of range in %s:%d", name, line);
 			}
 			return ((char)i);
 		}
@@ -405,7 +391,7 @@ int lirc_mode(char *token, char *token2, char **mode,
 				new_entry = (struct lirc_config_entry *)
 				    malloc(sizeof(struct lirc_config_entry));
 				if (new_entry == NULL) {
-					lirc_printf("%s: out of memory\n", lirc_prog);
+					lirc_log(LOG_ERR, "out of memory");
 					return (-1);
 				} else {
 					new_entry->prog = NULL;
@@ -423,7 +409,7 @@ int lirc_mode(char *token, char *token2, char **mode,
 					*new_config = new_entry;
 				}
 			} else {
-				lirc_printf("%s: bad file format, %s:%d\n", lirc_prog, name, line);
+				lirc_log(LOG_ERR, "%s: bad file format, %s:%d", name, line);
 				return (-1);
 			}
 		} else {
@@ -433,7 +419,7 @@ int lirc_mode(char *token, char *token2, char **mode,
 					return (-1);
 				}
 			} else {
-				lirc_printf("%s: bad file format, %s:%d\n", lirc_prog, name, line);
+				lirc_log(LOG_ERR, "bad file format, %s:%d", name, line);
 				return (-1);
 			}
 		}
@@ -442,7 +428,7 @@ int lirc_mode(char *token, char *token2, char **mode,
 			if (new_entry != NULL) {
 #if 0
 				if (new_entry->prog == NULL) {
-					lirc_printf("%s: prog missing in config before line %d\n", lirc_prog, line);
+					lirc_log(LOG_ERR, "prog missing in config before line %d", line);
 					lirc_freeconfigentries(new_entry);
 					*new_config = NULL;
 					return (-1);
@@ -467,7 +453,7 @@ int lirc_mode(char *token, char *token2, char **mode,
 				if (*mode != NULL) {
 					new_entry->mode = strdup(*mode);
 					if (new_entry->mode == NULL) {
-						lirc_printf("%s: out of memory\n", lirc_prog);
+						lirc_log(LOG_ERR, "out of memory");
 						return (-1);
 					}
 				}
@@ -489,30 +475,30 @@ int lirc_mode(char *token, char *token2, char **mode,
 					new_entry->rep_delay = new_entry->rep - 1;
 				}
 			} else {
-				lirc_printf("%s: %s:%d: 'end' without 'begin'\n", lirc_prog, name, line);
+				lirc_log(LOG_ERR, "%s:%d: 'end' without 'begin'", name, line);
 				return (-1);
 			}
 		} else {
 			if (*mode != NULL) {
 				if (new_entry != NULL) {
-					lirc_printf("%s: %s:%d: missing 'end' token\n", lirc_prog, name, line);
+					lirc_log(LOG_ERR, "%s:%d: missing 'end' token", name, line);
 					return (-1);
 				}
 				if (strcasecmp(*mode, token2) == 0) {
 					free(*mode);
 					*mode = NULL;
 				} else {
-					lirc_printf("%s: \"%s\" doesn't "
-						    "match mode \"%s\"\n", lirc_prog, token2, *mode);
+					lirc_log(LOG_ERR, "\"%s\" doesn't "
+						    "match mode \"%s\"", token2, *mode);
 					return (-1);
 				}
 			} else {
-				lirc_printf("%s: %s:%d: 'end %s' without 'begin'\n", lirc_prog, name, line, token2);
+				lirc_log(LOG_ERR, "%s:%d: 'end %s' without 'begin'", name, line, token2);
 				return (-1);
 			}
 		}
 	} else {
-		lirc_printf("%s: unknown token \"%s\" in %s:%d ignored\n", lirc_prog, token, name, line);
+		lirc_log(LOG_NOTICE, "unknown token \"%s\" in %s:%d ignored", token, name, line);
 	}
 	return (0);
 }
@@ -536,7 +522,7 @@ unsigned int lirc_flags(char *string)
 		} else if (strcasecmp(s, "toggle_reset") == 0) {
 			flags |= toggle_reset;
 		} else {
-			lirc_printf("%s: unknown flag \"%s\"\n", lirc_prog, s);
+			lirc_log(LOG_NOTICE, "unknown flag \"%s\"", s);
 		}
 		s = strtok(NULL, " \t");
 	}
@@ -554,7 +540,7 @@ static char *lirc_getfilename(const char *file, const char *current_file)
 		}
 		filename = (char *)malloc(strlen(home) + 1 + strlen(LIRCRC_USER_FILE) + 1);
 		if (filename == NULL) {
-			lirc_printf("%s: out of memory\n", lirc_prog);
+			lirc_log(LOG_ERR, "out of memory");
 			return NULL;
 		}
 		strcpy(filename, home);
@@ -569,7 +555,7 @@ static char *lirc_getfilename(const char *file, const char *current_file)
 		}
 		filename = (char *)malloc(strlen(home) + strlen(file) + 1);
 		if (filename == NULL) {
-			lirc_printf("%s: out of memory\n", lirc_prog);
+			lirc_log(LOG_ERR, "out of memory");
 			return NULL;
 		}
 		strcpy(filename, home);
@@ -578,7 +564,7 @@ static char *lirc_getfilename(const char *file, const char *current_file)
 		/* absulute path or root */
 		filename = strdup(file);
 		if (filename == NULL) {
-			lirc_printf("%s: out of memory\n", lirc_prog);
+			lirc_log(LOG_ERR, "out of memory");
 			return NULL;
 		}
 	} else {
@@ -588,7 +574,7 @@ static char *lirc_getfilename(const char *file, const char *current_file)
 			pathlen--;
 		filename = (char *)malloc(pathlen + strlen(file) + 1);
 		if (filename == NULL) {
-			lirc_printf("%s: out of memory\n", lirc_prog);
+			lirc_log(LOG_ERR, "out of memory");
 			return NULL;
 		}
 		memcpy(filename, current_file, pathlen);
@@ -610,8 +596,8 @@ static FILE *lirc_open(const char *file, const char *current_file, char **full_n
 
 	fin = fopen(filename, "r");
 	if (fin == NULL && (file != NULL || errno != ENOENT)) {
-		lirc_printf("%s: could not open config file %s\n", lirc_prog, filename);
-		lirc_perror(lirc_prog);
+		lirc_log(LOG_ERR, "could not open config file %s\n", filename);
+		lirc_log_err(LOG_ERR, NULL);
 	} else if (fin == NULL) {
 		const char *root_file = LIRCRC_ROOT_FILE;
 		fin = fopen(root_file, "r");
@@ -622,18 +608,18 @@ static FILE *lirc_open(const char *file, const char *current_file, char **full_n
 			errno = save_errno;
 		}
 		if (fin == NULL && errno != ENOENT) {
-			lirc_printf("%s: could not open config file %s\n", lirc_prog, LIRCRC_ROOT_FILE);
-			lirc_perror(lirc_prog);
+			lirc_log(LOG_ERR, "could not open config file %s", LIRCRC_ROOT_FILE);
+			lirc_log_err(LOG_ERR, NULL);
 		} else if (fin == NULL) {
-			lirc_printf("%s: could not open config files "
-				    "%s and %s\n", lirc_prog, filename, LIRCRC_ROOT_FILE);
-			lirc_perror(lirc_prog);
+			lirc_log(LOG_ERR, "could not open config files "
+				    "%s and %s", filename, LIRCRC_ROOT_FILE);
+			lirc_log_err(LOG_ERR, NULL);
 		} else {
 			free(filename);
 			filename = strdup(root_file);
 			if (filename == NULL) {
 				fclose(fin);
-				lirc_printf("%s: out of memory\n", lirc_prog);
+				lirc_log(LOG_ERR, "out of memory");
 				return NULL;
 			}
 		}
@@ -651,7 +637,7 @@ static struct filestack_t *stack_push(struct filestack_t *parent)
 	struct filestack_t *entry;
 	entry = malloc(sizeof(struct filestack_t));
 	if (entry == NULL) {
-		lirc_printf("%s: out of memory\n", lirc_prog);
+		lirc_log(LOG_ERR, "out of memory");
 		return NULL;
 	}
 	entry->file = NULL;
@@ -702,13 +688,13 @@ int lirc_readconfig(char *file, struct lirc_config **config, int (check) (char *
 
 	addr.sun_family = AF_UNIX;
 	if (lirc_getsocketname(filename, addr.sun_path, sizeof(addr.sun_path)) > sizeof(addr.sun_path)) {
-		lirc_printf("%s: WARNING: file name too long\n", lirc_prog);
+		lirc_log(LOG_WARNING, "file name too long");
 		goto lirc_readconfig_compat;
 	}
 	sockfd = socket(AF_UNIX, SOCK_STREAM, 0);
 	if (sockfd == -1) {
-		lirc_printf("%s: WARNING: could not open socket\n", lirc_prog);
-		lirc_perror(lirc_prog);
+		lirc_log(LOG_ERR, "could not open socket");
+		lirc_log_err(LOG_ERR, NULL);
 		goto lirc_readconfig_compat;
 	}
 	if (connect(sockfd, (struct sockaddr *)&addr, sizeof(addr)) != -1) {
@@ -752,8 +738,8 @@ int lirc_readconfig(char *file, struct lirc_config **config, int (check) (char *
 
 	sockfd = socket(AF_UNIX, SOCK_STREAM, 0);
 	if (sockfd == -1) {
-		lirc_printf("%s: WARNING: could not open socket\n", lirc_prog);
-		lirc_perror(lirc_prog);
+		lirc_log(LOG_ERR, "could not open socket");
+		lirc_log_err(LOG_ERR, NULL);
 		goto lirc_readconfig_compat;
 	}
 	if (connect(sockfd, (struct sockaddr *)&addr, sizeof(addr)) != -1) {
@@ -826,7 +812,7 @@ static int lirc_readconfig_only_internal(char *file,
 			if (strncmp(string, "#!", 2) == 0) {
 				*sha_bang = strdup(string + 2);
 				if (*sha_bang == NULL) {
-					lirc_printf("%s: out of memory\n", lirc_prog);
+					lirc_log(LOG_ERR, "out of memory");
 					ret = -1;
 					free(string);
 					break;
@@ -843,8 +829,8 @@ static int lirc_readconfig_only_internal(char *file,
 				/* ignore comment */
 			} else if (strcasecmp(token, "include") == 0) {
 				if (open_files >= MAX_INCLUDES) {
-					lirc_printf("%s: too many files "
-						    "included at %s:%d\n", lirc_prog, filestack->name, filestack->line);
+					lirc_log(LOG_ERR, "too many files "
+						    "included at %s:%d", filestack->name, filestack->line);
 					ret = -1;
 				} else {
 					token2 = strtok(NULL, "");
@@ -869,8 +855,8 @@ static int lirc_readconfig_only_internal(char *file,
 			} else {
 				token2 = strtok(NULL, " \t");
 				if (token2 != NULL && (token3 = strtok(NULL, " \t")) != NULL) {
-					lirc_printf("%s: unexpected token in line %s:%d\n",
-						    lirc_prog, filestack->name, filestack->line);
+					lirc_log(LOG_NOTICE, "unexpected token in line %s:%d",
+					         filestack->name, filestack->line);
 				} else {
 					ret = lirc_mode(token, token2, &mode,
 							&new_entry, &first, &last,
@@ -898,13 +884,13 @@ static int lirc_readconfig_only_internal(char *file,
 			if (token[0] == '#') {
 				/* ignore comment */
 			} else if (new_entry == NULL) {
-				lirc_printf("%s: bad file format, %s:%d\n",
-					    lirc_prog, filestack->name, filestack->line);
+				lirc_log(LOG_ERR, "bad file format, %s:%d",
+				         filestack->name, filestack->line);
 				ret = -1;
 			} else {
 				token2 = strdup(token2);
 				if (token2 == NULL) {
-					lirc_printf("%s: out of memory\n", lirc_prog);
+					lirc_log(LOG_ERR, "out of memory");
 					ret = -1;
 				} else if (strcasecmp(token, "prog") == 0) {
 					if (new_entry->prog != NULL)
@@ -927,7 +913,7 @@ static int lirc_readconfig_only_internal(char *file,
 					    malloc(sizeof(struct lirc_code));
 					if (code == NULL) {
 						free(token2);
-						lirc_printf("%s: out of memory\n", lirc_prog);
+						lirc_log(LOG_ERR, "out of memory");
 						ret = -1;
 					} else {
 						code->remote = remote;
@@ -948,7 +934,7 @@ static int lirc_readconfig_only_internal(char *file,
 						if (remote != LIRC_ALL) {
 							remote = strdup(remote);
 							if (remote == NULL) {
-								lirc_printf("%s: out of memory\n", lirc_prog);
+								lirc_log(LOG_ERR, "out of memory");
 								ret = -1;
 							}
 						}
@@ -960,8 +946,8 @@ static int lirc_readconfig_only_internal(char *file,
 					new_entry->rep_delay = strtoul(token2, &end, 0);
 					if ((new_entry->rep_delay == ULONG_MAX && errno == ERANGE)
 					    || end[0] != 0 || strlen(token2) == 0) {
-						lirc_printf("%s: \"%s\" not"
-							    " a  valid number for delay\n", lirc_prog, token2);
+						lirc_log(LOG_NOTICE, "\"%s\" not"
+							    " a  valid number for delay", token2);
 					}
 					free(token2);
 				} else if (strcasecmp(token, "repeat") == 0) {
@@ -971,8 +957,8 @@ static int lirc_readconfig_only_internal(char *file,
 					new_entry->rep = strtoul(token2, &end, 0);
 					if ((new_entry->rep == ULONG_MAX && errno == ERANGE)
 					    || end[0] != 0 || strlen(token2) == 0) {
-						lirc_printf("%s: \"%s\" not"
-							    " a  valid number for repeat\n", lirc_prog, token2);
+						lirc_log(LOG_NOTICE, "\"%s\" not"
+							    " a  valid number for repeat", token2);
 					}
 					free(token2);
 				} else if (strcasecmp(token, "config") == 0) {
@@ -982,7 +968,7 @@ static int lirc_readconfig_only_internal(char *file,
 					    malloc(sizeof(struct lirc_list));
 					if (new_list == NULL) {
 						free(token2);
-						lirc_printf("%s: out of memory\n", lirc_prog);
+						lirc_log(LOG_ERR, "out of memory");
 						ret = -1;
 					} else {
 						lirc_parse_string(token2, filestack->name, filestack->line);
@@ -1004,8 +990,8 @@ static int lirc_readconfig_only_internal(char *file,
 					free(token2);
 				} else {
 					free(token2);
-					lirc_printf("%s: unknown token \"%s\" in %s:%d ignored\n",
-						    lirc_prog, token, filestack->name, filestack->line);
+					lirc_log(LOG_NOTICE, "unknown token \"%s\" in %s:%d ignored",
+					         token, filestack->name, filestack->line);
 				}
 			}
 		}
@@ -1018,7 +1004,7 @@ static int lirc_readconfig_only_internal(char *file,
 	if (new_entry != NULL) {
 		if (ret == 0) {
 			ret = lirc_mode("end", NULL, &mode, &new_entry, &first, &last, check, "", 0);
-			lirc_printf("%s: warning: end token missing at end of file\n", lirc_prog);
+			lirc_log(LOG_WARNING, "end token missing at end of file");
 		} else {
 			lirc_freeconfigentries(new_entry);
 			new_entry = NULL;
@@ -1026,7 +1012,7 @@ static int lirc_readconfig_only_internal(char *file,
 	}
 	if (mode != NULL) {
 		if (ret == 0) {
-			lirc_printf("%s: warning: no end token found for mode \"%s\"\n", lirc_prog, mode);
+			lirc_log(LOG_WARNING, "no end token found for mode \"%s\"", mode);
 		}
 		free(mode);
 	}
@@ -1036,7 +1022,7 @@ static int lirc_readconfig_only_internal(char *file,
 		*config = (struct lirc_config *)
 		    malloc(sizeof(struct lirc_config));
 		if (*config == NULL) {
-			lirc_printf("%s: out of memory\n", lirc_prog);
+			lirc_log(LOG_ERR, "out of memory");
 			lirc_freeconfigentries(first);
 			return (-1);
 		}
@@ -1082,7 +1068,7 @@ static char *lirc_startupmode(struct lirc_config_entry *first)
 				scan->change_mode = NULL;
 				break;
 			} else {
-				lirc_printf("%s: startup_mode flags requires 'mode ='\n", lirc_prog);
+				lirc_log(LOG_NOTICE, "startup_mode flags requires 'mode ='");
 			}
 		}
 		scan = scan->next;
@@ -1303,7 +1289,7 @@ char *lirc_ir2char(struct lirc_config *config, char *code)
 	char *string;
 
 	if (warning) {
-		fprintf(stderr, "%s: warning: lirc_ir2char() is obsolete\n", lirc_prog);
+		lirc_log(LOG_WARNING, "lirc_ir2char() is obsolete");
 		warning = 0;
 	}
 	if (lirc_code2char(config, code, &string) == -1)
@@ -1425,7 +1411,7 @@ char *lirc_nextir(void)
 	int ret;
 
 	if (warning) {
-		fprintf(stderr, "%s: warning: lirc_nextir() is obsolete\n", lirc_prog);
+		lirc_log(LOG_WARNING, "lirc_nextir() is obsolete");
 		warning = 0;
 	}
 	ret = lirc_nextcode(&code);
@@ -1445,7 +1431,7 @@ int lirc_nextcode(char **code)
 	if (lirc_buffer == NULL) {
 		lirc_buffer = (char *)malloc(packet_size + 1);
 		if (lirc_buffer == NULL) {
-			lirc_printf("%s: out of memory\n", lirc_prog);
+			lirc_log(LOG_ERR, "out of memory");
 			return (-1);
 		}
 		lirc_buffer[0] = 0;
@@ -1567,13 +1553,13 @@ static const char *lirc_read_string(int fd)
 		end = NULL;
 	}
 	if (strlen(buffer) != tail) {
-		lirc_printf("%s: protocol error\n", lirc_prog);
+		lirc_log(LOG_ERR, "protocol error");
 		goto lirc_read_string_error;
 	}
 
 	while (end == NULL) {
 		if (LIRC_PACKET_SIZE <= tail) {
-			lirc_printf("%s: bad packet\n", lirc_prog);
+			lirc_log(LOG_ERR, "bad packet");
 			goto lirc_read_string_error;
 		}
 
@@ -1586,18 +1572,18 @@ static const char *lirc_read_string(int fd)
 		}
 		while (ret == -1 && errno == EINTR);
 		if (ret == -1) {
-			lirc_printf("%s: select() failed\n", lirc_prog);
-			lirc_perror(lirc_prog);
+			lirc_log(LOG_ERR, "select() failed");
+			lirc_log_err(LOG_ERR, NULL);
 			goto lirc_read_string_error;
 		} else if (ret == 0) {
-			lirc_printf("%s: timeout\n", lirc_prog);
+			lirc_log(LOG_ERR, "timeout");
 			goto lirc_read_string_error;
 		}
 
 		n = read(fd, buffer + tail, LIRC_PACKET_SIZE - tail);
 		if (n <= 0) {
-			lirc_printf("%s: read() failed\n", lirc_prog);
-			lirc_perror(lirc_prog);
+			lirc_log(LOG_ERR, "read() failed");
+			lirc_log_err(LOG_ERR, NULL);
 			goto lirc_read_string_error;
 		}
 		buffer[tail + n] = 0;
@@ -1633,8 +1619,8 @@ int lirc_send_command(int sockfd, const char *command, char *buf, size_t * buf_l
 	while (todo > 0) {
 		done = write(sockfd, (void *)data, todo);
 		if (done < 0) {
-			lirc_printf("%s: could not send packet\n", lirc_prog);
-			lirc_perror(lirc_prog);
+			lirc_log(LOG_ERR, "could not send packet");
+			lirc_log_err(LOG_ERR, NULL);
 			return (-1);
 		}
 		data += done;
@@ -1670,7 +1656,7 @@ int lirc_send_command(int sockfd, const char *command, char *buf, size_t * buf_l
 				status = LIRC_RET_SUCCESS;
 				goto good_packet;
 			} else if (strcasecmp(string, "ERROR") == 0) {
-				lirc_printf("%s: command failed: %s", lirc_prog, command);
+				lirc_log(LOG_NOTICE, "command failed: %s", command);
 				status = LIRC_RET_ERROR;
 			} else {
 				goto bad_packet;
@@ -1719,7 +1705,7 @@ int lirc_send_command(int sockfd, const char *command, char *buf, size_t * buf_l
 	/* never reached */
 
 bad_packet:
-	lirc_printf("%s: bad return packet\n", lirc_prog);
+	lirc_log(LOG_ERR, "bad return packet");
 	return (-1);
 
 good_packet:
-- 
1.8.4

