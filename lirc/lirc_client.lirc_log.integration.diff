From c15bccd60bffdc1ff31f79546e4dc3402ddd451e Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Wed, 6 Aug 2014 19:37:52 +0100
Subject: lirc_client lirc_log integration

-decouple lirc_log from exclusive lircd use
-convert variadic logprintf function to wrapper for va_list
counterpart to fascilate client wrapper lirc_log()
-hides log creation from client applications
-use logfile options from client applications
-add lirc_log_deinit() to clean up (now) dynamic vars
---
 lib/lirc_client.c |  43 ++++++++++++---------
 lib/lirc_client.h |  28 ++++++++++++++
 lib/lirc_log.c    | 111 ++++++++++++++++++++++++++++++++----------------------
 lib/lirc_log.h    |  29 ++++++++++++--
 4 files changed, 145 insertions(+), 66 deletions(-)

diff --git a/lib/lirc_client.c b/lib/lirc_client.c
index 6ca912a..162301d 100644
--- a/lib/lirc_client.c
+++ b/lib/lirc_client.c
@@ -27,9 +27,11 @@
 #include <sys/stat.h>
 #include <sys/types.h>
 #include <sys/wait.h>
+#include <syslog.h>
 
 #include "lirc_client.h"
 #include "lirc_options.h"
+#include "lirc_log.h"
 
 /* internal defines */
 #define MAX_INCLUDES 10
@@ -94,7 +96,6 @@ static int lirc_identify(int sockfd);
 static int lirc_send_command(int sockfd, const char *command, char *buf, size_t * buf_len, int *ret_status);
 
 static int lirc_lircd;
-static int lirc_verbose = 0;
 static char *lirc_prog = NULL;
 static char *lirc_buffer = NULL;
 char *lirc_option = NULL;
@@ -102,29 +103,23 @@ char *lirc_option = NULL;
 static void lirc_printf(char *format_str, ...)
 {
 	va_list ap;
-
-	if (!lirc_verbose)
-		return;
-
 	va_start(ap, format_str);
-	vfprintf(stderr, format_str, ap);
+	logprintfva(LOG_INFO, format_str, ap);
 	va_end(ap);
 }
-
 static void lirc_perror(const char *s)
 {
-	if (!lirc_verbose)
-		return;
-
-	perror(s);
+	logperror(LOG_ERR, s);
 }
 
 int lirc_init(char *prog, int verbose) {
 	if (lirc_options == NULL)
 		lirc_options = dictionary_new(0);
+	char d[2];
+	sprintf(d, "%d", (verbose < 0 ? 0 : verbose) > LIRC_STALK ? LIRC_STALK : verbose);
 	const char* const defaults[] = {
 		options_name(lirc_option, prog, "name"), prog,
-		options_name(lirc_option, prog, "debug"), verbose ? "True" : "False",
+		options_name(lirc_option, prog, "debug"), d,
 		(const char*)NULL, (const char*)NULL
 	};
 	options_add_defaults(defaults);
@@ -141,7 +136,7 @@ int lirc_init_wopt(const char *optprefix)
 	struct sockaddr_un addr;
 	const char* const defaults[] = {
 		options_name(lirc_option, optprefix, "name"), optprefix,
-		options_name(lirc_option, optprefix, "debug"), 0,
+		options_name(lirc_option, optprefix, "debug"), "0",
 		options_name(lirc_option, optprefix, "socket"), LIRCD,
 		options_name(lirc_option, optprefix, "logfile"), LOGFILE,
 		(const char*)NULL, (const char*)NULL
@@ -159,16 +154,18 @@ int lirc_init_wopt(const char *optprefix)
 	strcpy(addr.sun_path, options_getstring(options_name(lirc_option, optprefix, "socket")));
 	lirc_lircd = socket(AF_UNIX, SOCK_STREAM, 0);
 	if (lirc_lircd == -1) {
-		lirc_printf("%s: could not open socket\n", lirc_prog);
-		lirc_perror(lirc_prog);
+		lirc_log(LOG_ERR, "could not open socket");
+		lirc_log_err(LOG_ERR, "");
+		lirc_log_deinit();
 		free(lirc_prog);
 		lirc_prog = NULL;
 		return (-1);
 	}
 	if (connect(lirc_lircd, (struct sockaddr *)&addr, sizeof(addr)) == -1) {
 		close(lirc_lircd);
-		lirc_printf("%s: could not connect to socket\n", lirc_prog);
-		lirc_perror(lirc_prog);
+		lirc_log(LOG_ERR, "could not connect to socket");
+		lirc_log_err(LOG_ERR, "");
+		lirc_log_deinit();
 		free(lirc_prog);
 		lirc_prog = NULL;
 		return (-1);
@@ -190,6 +187,7 @@ int lirc_deinit(void)
 		free(lirc_option);
 		lirc_option = NULL;
 	}
+	lirc_log_deinit();
 	dictionary_del(lirc_options);
 	return (close(lirc_lircd));
 }
@@ -1767,3 +1765,14 @@ void lirc_opt_load(int argc, char **argv,
 		void (*parse_options)(int, char**)) {
 	options_load(argc, argv, options_file, parse_options);
 }
+
+/* lirc_log.h wrappers */
+void lirc_log(int prio, const char *format_str, ...) {
+	va_list ap;
+	va_start(ap, format_str);
+	logprintfva(prio, format_str, ap);
+	va_end(ap);
+}
+void lirc_log_err(int prio, const char *s) {
+	logperror(prio, s);
+}
diff --git a/lib/lirc_client.h b/lib/lirc_client.h
index bba09aa..3faff4e 100644
--- a/lib/lirc_client.h
+++ b/lib/lirc_client.h
@@ -106,6 +106,34 @@ extern "C" {
 	void lirc_opt_load(int argc, char **argv,
 		const char* options_file,
 		void (*options_load)(int, char**));
+
+/* lirc_log.h wrappers */
+
+/* syslog levels */
+#define LOG_EMERG 0 /* system is unusable */
+#define LOG_ALERT 1 /* action must be taken immediately */
+#define LOG_CRIT  2 /* critical conditions */
+#define LOG_ERR   3 /* error conditions */
+#define LOG_WARNING 4 /* warning conditions */
+#define LOG_NOTICE  5 /* normal but significant condition */
+#define LOG_INFO  6 /* informational */
+#define LOG_DEBUG 7 /* debug-level messages */
+
+/* additional priority levels */
+#define LIRC_TRACE 8
+#define LIRC_PEEP  9
+#define LIRC_STALK 10
+
+/* 'fail-fast' log and error macros */
+#define LIRC_LOG(level,fmt,args...) \
+	if (level <= debug) lirc_log(level, fmt, ## args)
+#define LIRC_LOG_ERR(level,s) \
+	if (level <= debug) lirc_log_err(level, s)
+
+/* log and error wrappers */
+	void lirc_log(int prio, const char *format_str, ...);
+	void lirc_log_err(int prio, const char *s);
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/lib/lirc_log.c b/lib/lirc_log.c
index 9f57723..1a9a08e 100644
--- a/lib/lirc_log.c
+++ b/lib/lirc_log.c
@@ -43,17 +43,13 @@ char hostname[HOSTNAME_LEN + 1];
 FILE *lf = NULL;
 
 int debug = 0;
-
 static int use_syslog = 1;
-
-static int log_enabled = 1;
-
-const char *syslogident = "lircd-" VERSION;
-char *logfile = LOGFILE;
-
-char progname[128] = {'?','\0'};
 static int nodaemon = 0;
+char* progname = NULL;
+char *syslogident = NULL;
+char *logfile = NULL;
 
+static int log_enabled = 0;
 
 static const char* prio2text(int prio)
 {
@@ -80,67 +76,90 @@ int lirc_log_use_syslog()
 void lirc_set_logfile(char* s)
 {
 	if (strcmp(s, "syslog") == 0) {
-            use_syslog  = 1;
-        } else {
-	    logfile = s;
-            use_syslog = 0;
+		use_syslog = 1;
+	} else {
+		logfile = realloc(logfile, strlen(s) + 1);
+		strcpy(logfile, s);
+		use_syslog = 0;
 	}
 }
 
+char* lirc_get_logfile() {
+	return logfile;
+}
 
 int lirc_log_open(const char* _progname, int _nodaemon, int _debug)
 {
-	strncpy(progname, _progname, sizeof(progname));
+	progname = malloc(strlen(_progname) + 1);
+	sprintf(progname, "%s", _progname);
 	nodaemon = _nodaemon;
 	debug = _debug;
 
 	if (use_syslog) {
+		syslogident = malloc(strlen(progname) + 2 + strlen(VERSION) + 1);
+		sprintf(syslogident, "%s- %s", progname, VERSION);
 		if (nodaemon) {
 			openlog(syslogident, LOG_CONS | LOG_PID | LOG_PERROR, LOG_LOCAL0);
 		} else {
 			openlog(syslogident, LOG_CONS | LOG_PID, LOG_LOCAL0);
 		}
 	} else {
+		if (logfile == NULL) {
+			fprintf(stderr, "%s: log file not set\n", progname);
+			perror(progname);
+			return 1;
+		}
 		lf = fopen(logfile, "a");
 		if (lf == NULL) {
-			fprintf(stderr, "%s: could not open logfile\n", progname);
+			fprintf(stderr, "%s: could not open logfile %s\n", progname, logfile);
 			perror(progname);
 			return 1;
 		}
 		gethostname(hostname, HOSTNAME_LEN);
 	}
+	log_enable(1);
 	return 0;
 }
 
+int lirc_log_deinit()
+{
+	lirc_log_close();
+	free(syslogident);
+	syslogident = NULL;
+	free(logfile);
+	logfile = NULL;
+	free(progname);
+	progname = NULL;
+	return 0;
+}
 
 int lirc_log_close()
 {
+	logprintf(LOG_INFO, "closing logfile");
 	if (use_syslog){
-        	closelog();
-                return(0);
-	}
-	else if (lf)
-		return( fclose(lf));
-	else
+		closelog();
+		return(0);
+	} else if (lf) {
+		struct stat s;
+		if (-1 == fstat(fileno(lf), &s)) {
+			perror("Invalid logfile!");
+			return -1;
+		}
+		return(fclose(lf));
+	} else
 		return(0);
 }
 
-
-
 int lirc_log_reopen(void)
 {
-	struct stat s;
-
 	if (use_syslog)
 		/* Don't need to do anything; this is syslogd's task */
 		return(0);
 
-	logprintf(LOG_INFO, "closing logfile");
-	if (-1 == fstat(fileno(lf), &s)) {
-		perror("Invalid logfile!");
+	if (lirc_log_close() != 0)
 		return -1;
-	}
-	fclose(lf);
+	struct stat s;
+	fstat(fileno(lf), &s);
 	lf = fopen(logfile, "a");
 	if (lf == NULL) {
 		/* can't print any error messagees */
@@ -185,37 +204,39 @@ void log_enable(int enabled)
  */
 void logprintf(int prio, const char *format_str, ...)
 {
-	int save_errno = errno;
 	va_list ap;
+	va_start(ap, format_str);
+	logprintfva(prio, format_str, ap);
+	va_end(ap);
+}
+void logprintfva(int prio, const char *format_str, va_list ap)
+{
+	int save_errno = errno;
 
 	if (!log_enabled)
 		return;
 
+	if (use_syslog && prio > LOG_DEBUG)
+		prio = LOG_DEBUG;
+
 	if (nodaemon && prio <= debug) {
-		fprintf(stderr, "%s: %s", progname, prio2text(prio));
-		va_start(ap, format_str);
+		fprintf(stderr, "%s: %s | ", progname, prio2text(prio));
 		vfprintf(stderr, format_str, ap);
-		va_end(ap);
 		fputc('\n', stderr);
 		fflush(stderr);
 	}
-	if (use_syslog) {
-		va_start(ap, format_str);
+	if (use_syslog)
 		vsyslog(prio, format_str, ap);
-		va_end(ap);
-	} else if (lf && prio <= debug) {
+	else if (lf && prio <= debug) {
 		time_t current;
 		char *currents;
 
 		current = time(&current);
 		currents = ctime(&current);
 
-		fprintf(lf, "%15.15s %s %s: ",
-			currents + 4, hostname, progname);
-		fprintf(lf, "%s: ", prio2text(prio));
-		va_start(ap, format_str);
+		fprintf(lf, "%15.15s %s %s: %s | ",
+			currents + 4, hostname, progname, prio2text(prio));
 		vfprintf(lf, format_str, ap);
-		va_end(ap);
 		fputc('\n', lf);
 		fflush(lf);
 	}
@@ -238,10 +259,10 @@ void logperror(int prio, const char *s)
 		else
 			syslog(prio, "%m\n");
 	} else {
-		if (s != NULL) {
-			logprintf(prio, "%s: %s", s, strerror(errno));
-		} else {
+		if (s == NULL || strcmp(s, "") == 0) {
 			logprintf(prio, "%s", strerror(errno));
+		} else {
+			logprintf(prio, "%s: %s", s, strerror(errno));
 		}
 	}
 }
diff --git a/lib/lirc_log.h b/lib/lirc_log.h
index f86da53..86eaf58 100644
--- a/lib/lirc_log.h
+++ b/lib/lirc_log.h
@@ -22,12 +22,23 @@ extern "C" {
  */
 extern int debug;
 
+/* syslog levels */
+#define LOG_EMERG 0 /* system is unusable */
+#define LOG_ALERT 1 /* action must be taken immediately */
+#define LOG_CRIT  2 /* critical conditions */
+#define LOG_ERR   3 /* error conditions */
+#define LOG_WARNING 4 /* warning conditions */
+#define LOG_NOTICE  5 /* normal but significant condition */
+#define LOG_INFO  6 /* informational */
+#define LOG_DEBUG 7 /* debug-level messages */
+
+/* additional priority levels */
 #define LIRC_TRACE 8
 #define LIRC_PEEP  9
 #define LIRC_STALK 10
 
-/* Set by lirc_log_open, convenience copy for clients. */
-extern char progname[128];
+/* Set by lirc_log_open, used in log as prefix for identification. */
+char *progname;
 
 #define DEFAULT_LOGLEVEL  3
 
@@ -40,12 +51,15 @@ extern char progname[128];
 #define LOGPRINTF(level,fmt,args...) \
 	if (level + 7 <= debug ) logprintf(logmax(level + 7), fmt, ## args )
 
+#define LOGPRINTFVA(level,fmt,va) \
+	if (level + 7 <= debug ) logprintfva(logmax(level + 7), fmt, va )
+
 #define LOGPERROR(level,s) \
 	if (level + 7 <= debug ) logperror(logmax(level + 7), s)
 
 /*
  * Set the level using a string argument. If the level is NULL or
- * the string cant be parsed, use enviroemt variable LIRC_LOGLEVEL,
+ * the string cant be parsed, use environment variable LIRC_LOGLEVEL,
  * defaulting to DEFAULT_LOGLEVEL. Returns 0 if ok, 1 on errors.
  */
 int lirc_log_setlevel(const char* level);
@@ -59,10 +73,11 @@ int lirc_log_setlevel(const char* level);
 int lirc_log_use_syslog();
 
 void logprintf(int prio, const char *format_str, ...);
+void logprintfva(int prio, const char *format_str, va_list ap);
 void logperror(int prio, const char *s);
+int lirc_log_close();
 int lirc_log_reopen(void);
 int lirc_log_open(const char* progname, int _nodaemon, int _debug);
-int lirc_log_close();
 void log_enable(int enabled);
 
 /*
@@ -70,6 +85,12 @@ void log_enable(int enabled);
  * does indeed use syslog(1) instead.
  * */
 void lirc_set_logfile(char* s);
+char* lirc_get_logfile();
+
+/*
+ * Close log file if applicable and clean up local variables.
+ */
+int lirc_log_deinit();
 void hexdump(char *prefix, unsigned char* buf, int len);
 
 #ifdef __cplusplus
-- 
1.8.4

