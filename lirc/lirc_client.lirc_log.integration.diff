From 8be1804d9067264d13bc7a8d770be9b7aaeb90ac Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Wed, 6 Aug 2014 19:37:52 +0100
Subject: lirc_client lirc_log integration

-decouple lirc_log from exclusive lircd use
-add new default LOGFILE_CLIENTS file 'lircc'
-convert variadic logprintf function to wrapper for va_list
counterpart to fascilate client wrapper lirc_log()
-hides log creation from client applications
-use logfile options from client applications
-add lirc_log_deinit() to clean up (now) dynamic vars
---
 configure.ac      |   2 ++
 lib/lirc_client.c |  37 ++++++++++++--------
 lib/lirc_client.h |   5 +++
 lib/lirc_log.c    | 100 +++++++++++++++++++++++++++++++++++++-----------------
 lib/lirc_log.h    |  16 +++++++--
 5 files changed, 110 insertions(+), 50 deletions(-)

diff --git a/configure.ac b/configure.ac
index b3872c7..9514456 100644
--- a/configure.ac
+++ b/configure.ac
@@ -543,6 +543,7 @@ AH_TOP([
 
 /* log files */
 #define LOG_LIRCD       "lircd"
+#define LOG_LIRCC       "lircc"
 #define LOG_LIRMAND     "lirmand"
 
 /* pid file */
@@ -575,6 +576,7 @@ AH_BOTTOM([
 #define LIRCRC_OLD_ROOT_FILE    SYSCONFDIR "/" CFG_LIRCRC
 
 #define LOGFILE                 LOCALSTATEDIR "/log/" LOG_LIRCD
+#define LOGFILE_CLIENTS         LOCALSTATEDIR "/log/" LOG_LIRCC
 #define LIRMAND_LOGFILE         LOCALSTATEDIR "/log/" LOG_LIRMAND
 
 #define PIDFILE                 VARRUNDIR "/" PACKAGE "/" PID_LIRCD
diff --git a/lib/lirc_client.c b/lib/lirc_client.c
index a679cf1..082aa94 100644
--- a/lib/lirc_client.c
+++ b/lib/lirc_client.c
@@ -27,9 +27,11 @@
 #include <sys/stat.h>
 #include <sys/types.h>
 #include <sys/wait.h>
+#include <syslog.h>
 
 #include "lirc_client.h"
 #include "lirc_options.h"
+#include "lirc_log.h"
 
 /* internal defines */
 #define MAX_INCLUDES 10
@@ -94,7 +96,6 @@ static int lirc_identify(int sockfd);
 static int lirc_send_command(int sockfd, const char *command, char *buf, size_t * buf_len, int *ret_status);
 
 static int lirc_lircd;
-static int lirc_verbose = 0;
 static char *lirc_prog = NULL;
 static char *lirc_buffer = NULL;
 char *lirc_option = NULL;
@@ -102,21 +103,13 @@ char *lirc_option = NULL;
 static void lirc_printf(char *format_str, ...)
 {
 	va_list ap;
-
-	if (!lirc_verbose)
-		return;
-
 	va_start(ap, format_str);
-	vfprintf(stderr, format_str, ap);
+	logprintfva(LOG_INFO, format_str, ap);
 	va_end(ap);
 }
-
 static void lirc_perror(const char *s)
 {
-	if (!lirc_verbose)
-		return;
-
-	perror(s);
+	logperror(LOG_ERR, s);
 }
 
 int lirc_init(char *prog, int verbose) {
@@ -163,16 +156,18 @@ int lirc_init_wopt(const char *optprefix)
 	strcpy(addr.sun_path, options_getstring(options_name(lirc_option, optprefix, "socket")));
 	lirc_lircd = socket(AF_UNIX, SOCK_STREAM, 0);
 	if (lirc_lircd == -1) {
-		lirc_printf("%s: could not open socket\n", lirc_prog);
-		lirc_perror(lirc_prog);
+		lirc_log(LOG_ERR, "could not open socket");
+		lirc_log_err(LOG_ERR, "");
+		lirc_log_deinit();
 		free(lirc_prog);
 		lirc_prog = NULL;
 		return (-1);
 	}
 	if (connect(lirc_lircd, (struct sockaddr *)&addr, sizeof(addr)) == -1) {
 		close(lirc_lircd);
-		lirc_printf("%s: could not connect to socket\n", lirc_prog);
-		lirc_perror(lirc_prog);
+		lirc_log(LOG_ERR, "could not connect to socket");
+		lirc_log_err(LOG_ERR, "");
+		lirc_log_deinit();
 		free(lirc_prog);
 		lirc_prog = NULL;
 		return (-1);
@@ -194,6 +189,7 @@ int lirc_deinit(void)
 		free(lirc_option);
 		lirc_option = NULL;
 	}
+	lirc_log_deinit();
 	dictionary_del(lirc_options);
 	return (close(lirc_lircd));
 }
@@ -1771,3 +1767,14 @@ void lirc_opt_load(int argc, char **argv,
 		void (*parse_options)(int, char**)) {
 	options_load(argc, argv, options_file, parse_options);
 }
+
+/* lirc_log.h wrappers */
+void lirc_log(int prio, const char *format_str, ...) {
+	va_list ap;
+	va_start(ap, format_str);
+	logprintfva(prio, format_str, ap);
+	va_end(ap);
+}
+void lirc_log_err(int prio, const char *s) {
+	logperror(prio, s);
+}
diff --git a/lib/lirc_client.h b/lib/lirc_client.h
index d57e422..6657f88 100644
--- a/lib/lirc_client.h
+++ b/lib/lirc_client.h
@@ -105,6 +105,11 @@ extern "C" {
 	void lirc_opt_load(int argc, char **argv,
 		const char* options_file,
 		void (*options_load)(int, char**));
+
+/* lirc_log.h wrappers */
+	void lirc_log(int prio, const char *format_str, ...);
+	void lirc_log_err(int prio, const char *s);
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/lib/lirc_log.c b/lib/lirc_log.c
index 2279f4a..789deef 100644
--- a/lib/lirc_log.c
+++ b/lib/lirc_log.c
@@ -45,18 +45,16 @@ FILE *lf = NULL;
 #endif
 
 int debug = 0;
-
+static int nodaemon = 0;
+char* progname = NULL;
 #ifdef USE_SYSLOG
-const char *syslogident = "lircd-" VERSION;
+//const char *syslogident = "lircd-" VERSION;
+char *syslogident = NULL;
 #else
-char *logfile = LOGFILE;
+char *logfile = NULL;
 #endif
 
-char progname[128] = {'?','\0'};
-static int nodaemon = 0;
-
-
-static int log_enabled = 1;
+static int log_enabled = 0;
 
 static const char* prio2text(int prio)
 {
@@ -76,17 +74,25 @@ static const char* prio2text(int prio)
 void lirc_set_logfile(char* s)
 {
 #	ifndef USE_SYSLOG
-	logfile = s;
+	logfile = realloc(logfile, strlen(s) + 1);
+	strcpy(logfile, s);
+#	endif
+}
+char* lirc_get_logfile() {
+#	ifndef USE_SYSLOG
+	return logfile;
 #	endif
 }
 
 int lirc_log_open(const char* _progname, int _nodaemon, int _debug)
 {
-	strncpy(progname, _progname, sizeof(progname));
+	progname = malloc(strlen(_progname) + 1);
+	sprintf(progname, "%s", _progname);
 	nodaemon = _nodaemon;
 	debug = _debug;
-
 #ifdef USE_SYSLOG
+	syslogident = malloc(strlen(progname) + 2 + strlen(VERSION) + 1);
+	sprintf(syslogident, "%s- %s", progname, VERSION);
 #ifdef DAEMONIZE
 	if (nodaemon) {
 		openlog(syslogident, LOG_CONS | LOG_PID | LOG_PERROR, LIRC_SYSLOG);
@@ -97,6 +103,11 @@ int lirc_log_open(const char* _progname, int _nodaemon, int _debug)
 	openlog(syslogident, LOG_CONS | LOG_PID | LOG_PERROR, LIRC_SYSLOG);
 #endif
 #else
+	if (logfile == NULL) {
+		fprintf(stderr, "%s: log file not set\n", progname);
+		perror(progname);
+		return 1;
+	}
 	lf = fopen(logfile, "a");
 	if (lf == NULL) {
 		fprintf(stderr, "%s: could not open logfile\n", progname);
@@ -105,6 +116,36 @@ int lirc_log_open(const char* _progname, int _nodaemon, int _debug)
 	}
 	gethostname(hostname, HOSTNAME_LEN);
 #endif
+	log_enable(1);
+	return 0;
+}
+
+int lirc_log_deinit()
+{
+	lirc_log_close();
+#ifdef USE_SYSLOG
+	free(syslogident);
+	syslogident = NULL;
+#else
+	free(logfile);
+	logfile = NULL;
+#endif
+	free(progname);
+	progname = NULL;
+	return 0;
+}
+
+int lirc_log_close()
+{
+	if (lf) {
+		struct stat s;
+		if (-1 == fstat(fileno(lf), &s)) {
+			perror("Invalid logfile!");
+			return -1;
+		}
+		logprintf(LOG_INFO, "closing logfile");
+		fclose(lf);
+	}
 	return 0;
 }
 
@@ -113,14 +154,10 @@ int lirc_log_reopen(void)
 #ifdef USE_SYSLOG
 	/* we don't need to do anyting as this is syslogd's task */
 #else
-	struct stat s;
-
-	logprintf(LOG_INFO, "closing logfile");
-	if (-1 == fstat(fileno(lf), &s)) {
-		perror("Invalid logfile!");
+	if (lirc_log_close() != 0)
 		return -1;
-	}
-	fclose(lf);
+	struct stat s;
+	fstat(fileno(lf), &s);
 	lf = fopen(logfile, "a");
 	if (lf == NULL) {
 		/* can't print any error messagees */
@@ -160,24 +197,26 @@ void log_enable(int enabled)
 
 void logprintf(int prio, const char *format_str, ...)
 {
-	int save_errno = errno;
 	va_list ap;
+	va_start(ap, format_str);
+	logprintfva(prio, format_str, ap);
+	va_end(ap);
+}
+void logprintfva(int prio, const char *format_str, va_list ap)
+{
+	int save_errno = errno;
 
 	if (!log_enabled)
 		return;
 
 	if (nodaemon && prio <= debug) {
-		fprintf(stderr, "%s: %s", progname, prio2text(prio));
-		va_start(ap, format_str);
+		fprintf(stderr, "%s: %s | ", progname, prio2text(prio));
 		vfprintf(stderr, format_str, ap);
-		va_end(ap);
 		fputc('\n', stderr);
 		fflush(stderr);
 	}
 #ifdef USE_SYSLOG
-	va_start(ap, format_str);
 	vsyslog(prio, format_str, ap);
-	va_end(ap);
 #else
 	if (lf && prio <= debug) {
 		time_t current;
@@ -186,12 +225,9 @@ void logprintf(int prio, const char *format_str, ...)
 		current = time(&current);
 		currents = ctime(&current);
 
-		fprintf(lf, "%15.15s %s %s: ",
-			currents + 4, hostname, progname);
-		fprintf(lf, prio2text(prio));
-		va_start(ap, format_str);
+		fprintf(lf, "%15.15s %s %s: %s | ",
+			currents + 4, hostname, progname, prio2text(prio));
 		vfprintf(lf, format_str, ap);
-		va_end(ap);
 		fputc('\n', lf);
 		fflush(lf);
 	}
@@ -210,10 +246,10 @@ void logperror(int prio, const char *s)
 	else
 		syslog(prio, "%m\n");
 #else
-	if (s != NULL) {
-		logprintf(prio, "%s: %s", s, strerror(errno));
-	} else {
+	if (s == NULL || strcmp(s, "") == 0) {
 		logprintf(prio, "%s", strerror(errno));
+	} else {
+		logprintf(prio, "%s: %s", s, strerror(errno));
 	}
 #endif
 }
diff --git a/lib/lirc_log.h b/lib/lirc_log.h
index c439e57..d4fd5f4 100644
--- a/lib/lirc_log.h
+++ b/lib/lirc_log.h
@@ -22,8 +22,8 @@ extern int debug;
 #define LIRC_PEEP  9
 #define LIRC_STALK 10
 
-/* Set by lirc_log_open, convenience copy for clients. */
-extern char progname[128];
+/* Set by lirc_log_open, used in log as prefix for identification. */
+char *progname;
 
 #define DEFAULT_LOGLEVEL  3
 
@@ -36,12 +36,15 @@ extern char progname[128];
 #define LOGPRINTF(level,fmt,args...) \
 	if (level + 7 <= debug ) logprintf(logmax(level + 7), fmt, ## args )
 
+#define LOGPRINTFVA(level,fmt,va) \
+	if (level + 7 <= debug ) logprintfva(logmax(level + 7), fmt, va )
+
 #define LOGPERROR(level,s) \
 	if (level + 7 <= debug ) logperror(logmax(level + 7), s)
 
 /*
  * Set the level using a string argument. If the level is NULL or
- * the string cant be parsed, use enviroemt variable LIRC_LOGLEVEL,
+ * the string cant be parsed, use environment variable LIRC_LOGLEVEL,
  * defaulting to DEFAULT_LOGLEVEL. Returns 0 if ok, 1 on errors.
  */
 int lirc_log_setlevel(const char* level);
@@ -52,11 +55,18 @@ int lirc_log_setlevel(const char* level);
 #define lirc_log_is_enabled_for(level) (level <= debug)
 
 void logprintf(int prio, const char *format_str, ...);
+void logprintfva(int prio, const char *format_str, va_list ap);
 void logperror(int prio, const char *s);
+int lirc_log_close();
 int lirc_log_reopen(void);
 int lirc_log_open(const char* progname, int _nodaemon, int _debug);
 void log_enable(int enabled);
 void lirc_set_logfile(char* s);
+char* lirc_get_logfile();
 
+/*
+ * Close log file if applicable and clean up local variables.
+ */
+int lirc_log_deinit();
 
 #endif /* _LIRC_LOG_H */
-- 
1.8.4

