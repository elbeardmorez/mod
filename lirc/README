
# main_.automake.install.hook.for.lirc_option.conf.prefix [git sha:333047d0e73bd97ce0b4faf92dc04761c0589f6e | committed]
-ensure pluginsdir option is inline with configured prefix

# lirc_client.lirc_options.integration.diff [git sha:3a58afac5991b58ddc0aadeb7c3110c4ebd814cc | pending]
-allows for simple client modification of lircd socket

# lirc_options,.dictionary.and.ciniparser.usability.diff [git sha:3a58afac5991b58ddc0aadeb7c3110c4ebd814cc | pending]
-ensure existing options exist post ciniparser_load
-meaningful return value for dictionary_del
-only ever allocate lirc_options dict if NULL
-allow option_set to create the new global dictionary, supporting

  if (socket)
     lirc_opt_set("client.app:socket", socket);
  lircdfd = lirc_init_wopt("client.app")

alternative lircd socket location creation
-update a few doc strings

# lirc_client.lirc_log.integration.diff [git sha:3a58afac5991b58ddc0aadeb7c3110c4ebd814cc | pending]
-decouple lirc_log from exclusive lircd use
-convert variadic logprintf function to wrapper for va_list
counterpart to fascilate client wrapper lirc_log()
-hides log creation from client applications
-use logfile options from client applications
-add lirc_log_deinit() to clean up (now) dynamic vars

# convert.lirc_client.print.calls.to.new.format.diff [git sha:3a58afac5991b58ddc0aadeb7c3110c4ebd814cc | pending]

# irexec_lircrcd.clients.option.and.log.integration.diff [git sha:3a58afac5991b58ddc0aadeb7c3110c4ebd814cc | pending]
-expose socket, logfile and debug options
-remove redundant lirc_log.h include from lircrcd. as a client app
it can use the client library log functions
-harmonise initialisation code with lircd
-improve --help information

# lircd.option.reading.and.logging.initialisation.diff [git sha:3a58afac5991b58ddc0aadeb7c3110c4ebd814cc | pending]
-rework initialisation to cope with user log file option
-improve debug option wording

# client_.use.'output'.option.of.lircrc.shebang.diff [git sha:3a58afac5991b58ddc0aadeb7c3110c4ebd814cc | pending]
-enhanced 'lirc_setsocketname()' replaces 'lirc_getsocketname()'
-add trivial lircrc shebang parse for optional 'output' arg to
ensure no mismatch of lircrc socket names in use
-pull in error checking and logging from (adjacent) calling code to
standardise use with a 0 success, 1 errors return mechanism
-only build lircrcd command when required
-fix lirc_readconfig mem leak

-with this change, an 'output' option in the lircrc #! line will be
parsed and used to correctly connect a client to either an existing
lircrcd socket, or, a new socket. previously, all socket testing
was done against a default socket name, making all use of lircrcd's
'output' option erroneous

# logging_.add.default.log.target.build.options.diff [git sha:3a58afac5991b58ddc0aadeb7c3110c4ebd814cc | pending]
-add '--with-daemon-logging' and '--with-client-logging' build options
both defaulting to syslog on configure's vsyslog  discovery
-facilitates non-syslog logging by default if required
-facilitates natural split of daemon and client logging if required

-rebrand 'logfile' as 'logtarget' in light of syslog non-fd target
-remove ancient/unused LIRMAND defines

# lircd_.utilise.lirc_log_reopen.diff [git sha:3a58afac5991b58ddc0aadeb7c3110c4ebd814cc | pending]
-remove code duplication

# main_.automake.install.hook.for.lirc_option.conf.plugindir.diff [git sha:9406e45e13d5a483b3758cf40f3aa94580a4dff3 | pending]
-replace based on libdir to support lib dir suffixes

