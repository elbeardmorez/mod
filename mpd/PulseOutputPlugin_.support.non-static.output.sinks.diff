From e4849ff0ce7eed71ab6010f1ec98e3f2b9849ceb Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Thu, 6 Mar 2014 17:35:59 +0000
Subject: PulseOutputPlugin: support non-static output sinks

-update default output sink on any change to the current stream's sink
-re-initialisation of audio output device, e.g. on player stop/start or
audio file format change, no longer results in reversion to statically
configured default sink
-revert to server-side choice of sink if connection to statically
configured default sink fails
---
 src/output/plugins/PulseOutputPlugin.cxx | 43 ++++++++++++++++++++++++--------
 1 file changed, 33 insertions(+), 10 deletions(-)

diff --git a/src/output/plugins/PulseOutputPlugin.cxx b/src/output/plugins/PulseOutputPlugin.cxx
index ec3725a..6fb67aa 100644
--- a/src/output/plugins/PulseOutputPlugin.cxx
+++ b/src/output/plugins/PulseOutputPlugin.cxx
@@ -37,15 +37,18 @@
 #include <assert.h>
 #include <stddef.h>
 #include <stdlib.h>
+#include <string>
 
 #define MPD_PULSE_NAME "Music Player Daemon"
 
 struct PulseOutput {
 	AudioOutput base;
 
+	/* static */
 	const char *name;
 	const char *server;
-	const char *sink;
+	/* dynamic */
+	std::string sink;
 
 	PulseMixer *mixer;
 
@@ -226,7 +229,12 @@ pulse_output_subscribe_cb(pa_context *context,
 	    idx == pa_stream_get_index(po->stream) &&
 	    (type == PA_SUBSCRIPTION_EVENT_NEW ||
 	     type == PA_SUBSCRIPTION_EVENT_CHANGE))
+	{
+		if (!po->sink.empty() &&
+		    po->sink != pa_stream_get_device_name(po->stream))
+		  po->sink = std::string(pa_stream_get_device_name(po->stream));
 		pulse_mixer_on_change(*po->mixer, context, po->stream);
+	}
 }
 
 /**
@@ -337,7 +345,8 @@ pulse_output_init(const config_param &param, Error &error)
 
 	po->name = param.GetBlockValue("name", "mpd_pulse");
 	po->server = param.GetBlockValue("server");
-	po->sink = param.GetBlockValue("sink");
+	po->sink = std::string(param.GetBlockValue("sink") ?
+	                         param.GetBlockValue("sink") : "");
 
 	po->mixer = nullptr;
 	po->mainloop = nullptr;
@@ -595,16 +604,16 @@ pulse_output_open(AudioOutput *ao, AudioFormat &audio_format,
 
 	/* .. and connect it (asynchronously) */
 
-	if (pa_stream_connect_playback(po->stream, po->sink,
+	if (pa_stream_connect_playback(po->stream,
+				       po->sink.empty() ? nullptr : po->sink.c_str(),
 				       nullptr, pa_stream_flags_t(0),
 				       nullptr, nullptr) < 0) {
-		pulse_output_delete_stream(po);
-
-		SetError(error, po->context,
-			 "pa_stream_connect_playback() has failed");
-		pa_threaded_mainloop_unlock(po->mainloop);
-		return false;
-	}
+			pulse_output_delete_stream(po);
+			SetError(error, po->context,
+				 "pa_stream_connect_playback() has failed");
+			pa_threaded_mainloop_unlock(po->mainloop);
+			return false;
+		}
 
 	pa_threaded_mainloop_unlock(po->mainloop);
 
@@ -730,6 +739,20 @@ pulse_output_play(AudioOutput *ao, const void *chunk, size_t size,
 
 	if (!pulse_output_wait_stream(po, error)) {
 		pa_threaded_mainloop_unlock(po->mainloop);
+		if (error.GetCode() == 5 && !po->sink.empty()) {
+			/* No such entity, fall back to pulseaudio server sink selection */
+			LogInfo(pulse_output_domain, "sink playback failure, falling "
+			                             "back to pa server sink selection");
+			po->sink = "";
+			AudioFormat af = ao->in_audio_format;
+			pulse_output_open(ao, af, IgnoreError());
+
+			pa_threaded_mainloop_lock(po->mainloop);
+			if (!pulse_output_wait_stream(po, error)) {
+				pa_threaded_mainloop_unlock(po->mainloop);
+				return 0;
+			}
+		} else
 		return 0;
 	}
 
-- 
1.8.2

