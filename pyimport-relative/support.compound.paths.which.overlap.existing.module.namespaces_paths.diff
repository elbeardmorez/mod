From 5fe5105b262dd596a8591b47815b2896313ef9ac Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Tue, 18 Mar 2014 13:31:33 +0000
Subject: support compound paths which overlap existing module namespaces/paths

-don't replace a temporily nuked' module prematurely. ensure that
removed 'top_modules' stay removed until the complete compound path
has been searched for

fixes e.g. import_relative('io.input', '...trepan', '')

-ensure that modules for all successful searches are placed in the
'sys.modules' dictionary. previously, duplicate searches were made
for some non-compound imports

-cleanup code:
--bring the initial module search into 'fallback' loop to avoid code
duplication
--trim fat e.g. pass statements
--improve comments detailing the routine

-added (and left in) debug statements to ease trace comparisons
---
 import_relative.py | 209 +++++++++++++++++++++++++++--------------------------
 1 file changed, 107 insertions(+), 102 deletions(-)

diff --git a/import_relative.py b/import_relative.py
index a9b7304..7c7ba16 100644
--- a/import_relative.py
+++ b/import_relative.py
@@ -14,6 +14,7 @@
 #   You should have received a copy of the GNU General Public License
 #   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 import imp, os, sys
+
 def get_srcdir(level=1):
     """Get directory of caller as an absolute file name. *level* is
     the number of frames to look back.  So for import file which is
@@ -94,130 +95,134 @@ def path2abspath(path, call_level):
         pass
     return srcdir
 
-def import_relative(import_name, path=None, top_name=None):
-    """Import `import_name' using `path' as the location to start
-    looking for it.  If `path' is not given, we'll look starting in
-    the directory where the import_relative was issued. In contrast to
-    __import__() which this uses, we alway return the last import
-    module when a compound import (e.g. a.b.c) is given.  Sorry, we
-    don't do "from lists", global or local variables here.
+def import_relative(import_name, root=None, top_name=None):
+    """Import `import_name' using `root' as the location to start
+    looking for it.  If `root' is not given, we'll look starting in
+    the directory where the import_relative was issued.
+    In contrast to __import__() which this uses, we always return the
+    last import module when a compound import (e.g. a.b.c) is given.
+    We don't support "from lists", global or local variables here.
 
     TODO: add a package/namespace parameter for which to add the name under.
     """
 
-    srcdir = path2abspath(path, 3)
+    if os.getenv('DEBUG'):
+        print("search | import_name: '%s', root: '%s', top_name: '%s'" \
+                 ) % (import_name, root, top_name)
+
+    srcdir = path2abspath(root, 3)
 
     if top_name:
         namespace = get_namespace(top_name, srcdir)
     else:
         namespace = None
-        pass
 
     import_modules = import_name.split('.')
     top_module = import_modules[0]
-    top_file_prefix = os.path.join(srcdir, top_module)
+    top_file_path = os.path.join(srcdir, top_module)
 
     if namespace:
-        namespaced_top_module = "%s.%s" % (namespace, top_module)
+        namespaced_path = "%s.%s" % (namespace, import_name)
     else:
-        namespaced_top_module = top_module
-        pass
+        namespaced_path = import_name
+
+    mod = sys.modules.get(namespaced_path)
+    if mod and hasattr(mod, '__file__') and \
+        mod.__file__.startswith(top_file_path):
+        # success
+        sys.modules[namespaced_path] = mod
+        result = mod
+    else:
+        # make use of 'imp.find_module()' and 'imp.load_module()' srcpath
+        # parameter to ensure we return the desired module
 
-    mod = sys.modules.get(namespaced_top_module)
-    if not mod or not mod.__file__.startswith(top_file_prefix):
+        # note for compound module names (e.g. 'a.b'), imp.find_module()
+        # doesn't seem to work, so we revert to this slightly hacky method
+        # of iterating the submodules of '[top_name.]import_name'
 
-        # If any of the following calls raises an exception,
-        # there's a problem we can't handle -- let the caller handle it.
+        # this doesn't deal with "from .. import .. as .." renaming
+        # (which would need to look at __name__)
 
-        try:
-            fp, pathname, description = imp.find_module(top_module, [srcdir])
-        except ImportError:
-            raise ImportError("No module %s found in %s" %
-                              (top_module, srcdir))
-        module_save = None
-        if sys.modules.get(namespaced_top_module):
-            # Temporarily nuke module so we will have to find it anew using
-            # our hacked sys.path.
-            fn = sys.modules[namespaced_top_module].__file__
-            if not fn.startswith(os.path.join(srcdir, top_module)):
-                module_save = sys.modules[namespaced_top_module]
-                del sys.modules[namespaced_top_module]
-                pass
-            pass
-        try:
-            try:
-                mod = imp.load_module(namespaced_top_module, fp, pathname,
-                                      description)
-            except (SystemError, ImportError):
-                mod = imp.load_module(top_module, fp, pathname, description)
-                pass
+        # a possible alternative is the hierarchical module import
+        # re-implemenation 'knee' see:
+        # 'http://docs.python.org/library/imputil.html'
+        # it seems to be a translation into Python of its C code
 
-            sys.modules[namespaced_top_module] = mod
-        finally:
-            # Since we may exit via an exception, close fp explicitly.
-            if fp:
-                fp.close()
-                pass
-            if module_save:
-                sys.modules[top_module] = module_save
-            elif namespace and top_module in sys.modules:
-                del sys.modules[top_module]
-                pass
-            pass
-        pass
-
-    # find_module module doesn't seem to work for compounds,
-    # e.g. imp.find_module('a.b', '/path/to/a').  Maybe when I
-    # understand 'knee' from:
-    # http://docs.python.org/library/imputil.html better. (It seems
-    # to be a translation into Python of its C code).
-    #
-    # Until then, So we'll use this hacky method which doesn't deal
-    # with "from .. import .. as .." renaming which would need to look
-    # at __name__.
-
-    prefix = namespaced_top_module
-    prev   = mod
-    del import_modules[0]
-    for mod_name in import_modules:
-        prefix += '.' + mod_name
-        if namespace:
-            namespaced_prefix = "%s.%s" % (namespace, prefix)
-        else:
-            namespaced_prefix = prefix
-            pass
-        module_save = None
-        if sys.modules.get(namespaced_prefix):
-            # Temporarily nuke module so we will have to find it anew using
-            # our hacked sys.path.
-            fn = sys.modules[namespaced_prefix].__file__
-            if not fn.startswith(os.path.join(srcdir, top_module)):
-                module_save = sys.modules[namespaced_prefix]
-                del sys.modules[namespaced_prefix]
-                pass
-            pass
+        path_collisions = {}
+        prev_mod = None
+        path = ""
+        fp = None  # file handle
         try:
-            next_mod = __import__(prefix, None, None, ['__bogus__'])
-            if namespace:
-                sys.modules[namespaced_prefix] = next_mod
-                pass
-        finally:
-            if module_save:
-                sys.modules[prefix] = module_save
-            elif namespace and prefix in sys.modules:
-                del sys.modules[prefix]
-                pass
-            pass
+            for mod_name in import_modules:
+                path = path + '.' + mod_name if path else mod_name
+                if namespace:
+                    namespaced_path = "%s.%s" % (namespace, path)
+                else:
+                    namespaced_path = path
+
+                if sys.modules.get(namespaced_path):
+                    fn = sys.modules[namespaced_path].__file__
+                    if fn.startswith(os.path.join(srcdir, top_module)):
+                        # success
+                        mod = sys.modules.get(namespaced_path)
+                        # short-circuit
+                        prev_mod = mod
+                        continue
+                    else:
+                        # Temporarily nuke module so it doesn't inferfere
+                        # with our searching
+                        path_collisions[namespaced_path] = \
+                                             sys.modules[namespaced_path]
+                        del sys.modules[namespaced_path]
+
+                if not prev_mod:
+                    # If any of the following calls raises an exception,
+                    # there's a problem we can't handle -- let the caller
+                    # handle it.
+                    try:
+                        fp, pathname, description = \
+                            imp.find_module(path, [srcdir])
+                    except ImportError:
+                        raise ImportError("No module %s found in %s" %
+                                          (path, srcdir))
+                    try:
+                        mod = imp.load_module(namespaced_path, fp,
+                                              pathname, description)
+                    except (SystemError, ImportError):
+                        mod = imp.load_module(path, fp,
+                                              pathname, description)
+                    sys.modules[namespaced_path] = mod
+                else:
+                    try:
+                        mod = __import__(path, None, None, ['__bogus__'])
+                        if namespace:
+                            sys.modules[namespaced_path] = mod
+                    finally:
+                        if namespace and path in sys.modules:
+                            del sys.modules[path]
+
+                prev_mod = mod
 
-        if hasattr(next_mod, '__path__'):
-            np = next_mod.__path__
-            np[0], np[-1] = np[-1], np[0]
-            pass
-        setattr(prev, mod_name, next_mod)
-        prev = next_mod
-        pass
+        finally:
+              # in case of an exception, close fp explicitly
+              if fp:
+                  fp.close()
+              if len(path_collisions) > 0:
+                # restore any modules temporarily removed from the sys.modules
+                # dictionary to facscilite our searching
+                for path_partial, mod_orig in path_collisions.items():
+                    # leave our target module overriding any original at the
+                    # ultimate/complete compound path
+                    if path_partial != path:
+                        sys.modules[path_partial] = mod_orig
+        result = prev_mod
+
+    if os.getenv('DEBUG'):
+        print("return | namespaced_path: '%s', mod: '%s'" \
+                 ) % (namespaced_path, str(result))
+
+    return result
 
-    return prev
 
 # Demo it
 if __name__=='__main__':
-- 
1.8.2

