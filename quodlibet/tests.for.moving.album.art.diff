From bdf42f19e5ad1ba4f7b980014703cb564e44eca9 Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Mon, 18 Sep 2017 20:52:28 +0100
Subject: tests for moving album art

---
 quodlibet/quodlibet/qltk/renamefiles.py  |  25 +++-
 quodlibet/tests/test_qltk_renamefiles.py | 246 ++++++++++++++++++++++++++++++-
 2 files changed, 261 insertions(+), 10 deletions(-)

diff --git a/quodlibet/quodlibet/qltk/renamefiles.py b/quodlibet/quodlibet/qltk/renamefiles.py
index 1973f3c..946e663 100644
--- a/quodlibet/quodlibet/qltk/renamefiles.py
+++ b/quodlibet/quodlibet/qltk/renamefiles.py
@@ -138,6 +138,7 @@ class RenameFiles(Gtk.VBox):
 
     def __init__(self, parent, library):
         super(RenameFiles, self).__init__(spacing=6)
+        self.__skip_interactive = False
         self.set_border_width(12)
 
         hbox = Gtk.HBox(spacing=6)
@@ -246,10 +247,10 @@ class RenameFiles(Gtk.VBox):
         column.set_sizing(Gtk.TreeViewColumnSizing.AUTOSIZE)
         self.view.append_column(column)
 
-        connect_obj(self.preview, 'clicked', self.__preview, None)
+        connect_obj(self.preview, 'clicked', self._preview, None)
 
-        connect_obj(parent, 'changed', self.__class__.__preview, self)
-        connect_obj(self.save, 'clicked', self.__rename, library)
+        connect_obj(parent, 'changed', self.__class__._preview, self)
+        connect_obj(self.save, 'clicked', self._rename, library)
 
         render.connect('edited', self.__row_edited)
 
@@ -277,12 +278,12 @@ class RenameFiles(Gtk.VBox):
             self.save.set_sensitive(True)
             model.path_changed(path)
 
-    def __rename(self, library):
+    def _rename(self, library):
         model = self.view.get_model()
         win = WritingWindow(self, len(model))
         win.show()
         was_changed = set()
-        skip_all = False
+        skip_all = self.__skip_interactive
         self.view.freeze_child_notify()
         should_move_art = config.getboolean("rename", "move_art")
         moveart_sets = {}
@@ -337,7 +338,7 @@ class RenameFiles(Gtk.VBox):
                     break
 
             if should_move_art:
-                self.__moveart(moveart_sets, old_pathfile, new_pathfile, song)
+                self._moveart(moveart_sets, old_pathfile, new_pathfile, song)
 
             if remove_empty_dirs:
                 path_old = os.path.dirname(old_pathfile)
@@ -356,7 +357,7 @@ class RenameFiles(Gtk.VBox):
         library.changed(was_changed)
         self.save.set_sensitive(False)
 
-    def __moveart(self, art_sets, pathfile_old, pathfile_new, song):
+    def _moveart(self, art_sets, pathfile_old, pathfile_new, song):
 
         path_old = os.path.dirname(os.path.realpath(pathfile_old))
         path_new = os.path.dirname(os.path.realpath(pathfile_new))
@@ -427,7 +428,7 @@ class RenameFiles(Gtk.VBox):
                     except Exception:
                         util.print_exc()
 
-    def __preview(self, songs):
+    def _preview(self, songs):
         model = self.view.get_model()
         if songs is None:
             songs = [e.song for e in itervalues(model)]
@@ -471,3 +472,11 @@ class RenameFiles(Gtk.VBox):
                 break
         else:
             self.set_sensitive(True)
+
+    @property
+    def test_mode(self):
+        return self.__skip_interactive
+
+    @test_mode.setter
+    def test_mode(self, value):
+        self.__skip_interactive = value
diff --git a/quodlibet/tests/test_qltk_renamefiles.py b/quodlibet/tests/test_qltk_renamefiles.py
index 9bffae4..59e8dc0 100644
--- a/quodlibet/tests/test_qltk_renamefiles.py
+++ b/quodlibet/tests/test_qltk_renamefiles.py
@@ -5,13 +5,17 @@
 # (at your option) any later version.
 
 import os
+import glob
+from gi.repository import Gtk, GObject
 
-from tests import TestCase
+from tests import TestCase, mkdtemp
 
 from senf import fsnative
 
+from quodlibet import config
+from quodlibet.formats import AudioFile
 from quodlibet.qltk.renamefiles import StripDiacriticals, StripNonASCII, \
-    Lowercase, SpacesToUnderscores, StripWindowsIncompat
+    Lowercase, SpacesToUnderscores, StripWindowsIncompat, RenameFiles
 from quodlibet.compat import text_type
 
 
@@ -110,3 +114,241 @@ class TLowercase(TFilter, TFilterMixin):
         v = self.c.filter(empty, fsnative(u"Foobar.BAZ"))
         self.failUnlessEqual(v, fsnative(u"foobar.baz"))
         self.failUnless(isinstance(v, fsnative))
+
+
+class Renamer(Gtk.EventBox):
+
+    __gsignals__ = {
+        'changed': (GObject.SignalFlags.RUN_LAST, None, (object,)),
+    }
+
+    def __init__(self, *args, **kwargs):
+        super(Renamer, self).__init__()
+
+        from quodlibet.library.libraries import SongLibrary
+
+        self.library = SongLibrary()
+        box = Gtk.EventBox()
+        self.renamer = RenameFiles(self.library, box)
+        box.add(self.renamer)
+
+        self.renamer.test_mode = True
+
+    def add_songs(self, songs):
+        self.library.add(songs)
+
+    def rename(self, pattern, songs):
+        self.renamer.combo.get_child().set_text(pattern)
+        self.renamer._preview(songs)
+        self.renamer._rename(self.library)
+
+
+class Song(AudioFile):
+    """A mock AudioFile belong to one of three albums,
+    based on a single number"""
+    def __init__(self, target, num):
+        super(Song, self).__init__()
+
+        self["title"] = "title_%d" % (num + 1)
+        self["artist"] = "artist"
+        self["album"] = "album"
+        self["labelid"] = self["album"]
+        self["~filename"] = \
+            fsnative(os.path.join(target, self["title"] + ".mp3"))
+
+
+class TMoveArt(TestCase):
+
+    Kind = Renamer
+
+    def setUp(self):
+        self.renamer = self.Kind()
+
+    def tearDown(self):
+        self.renamer.destroy()
+
+    def reset_environment(self):
+        config.init()
+        self.root_path = mkdtemp()
+        self.filenames = \
+            ['cover.jpg', 'info.jpg', 'title.jpg', 'title2.jpg']
+
+    def generate_songs(self, path, quantity):
+        return list(map(lambda num, path=path:
+                            Song(path, num), range(quantity)))
+
+    def generate_files(self, path, filenames):
+        pathfiles = []
+        for f in filenames:
+            pathfile = os.path.join(path, f)
+            if not os.path.isdir(os.path.dirname(pathfile)):
+                os.makedirs(os.path.dirname(pathfile))
+            with open(pathfile, "w") as fh:
+                fh.write(f)
+            pathfiles.append(pathfile)
+
+        return pathfiles
+
+    def art_set(self, path):
+        return self.generate_files(path, self.filenames)
+
+    def song_set(self, path):
+        songs = self.generate_songs(path, 1)
+        return (self.generate_files(path,
+            list(map(lambda song: os.path.basename(song['~filename']),
+                         songs))), songs)
+
+    def source_target(self, root_path, album, artist):
+        return (os.path.join(root_path, album, artist),
+                os.path.join(root_path + "_2", album, artist))
+
+    def moveart_set(self, artist='artist', album='album',
+                     source=None, target=None, file_pattern="<title>"):
+        source2, target2 = \
+            self.source_target(self.root_path, artist, album)
+        if not source:
+            source = source2
+        if not target:
+            target = target2
+        self.art_set(source)
+        song_files, songs = self.song_set(source)
+        self.renamer.add_songs(songs)
+        pattern = os.path.join(target, file_pattern)
+        self.renamer.rename(pattern, songs)
+        return (source, target)
+
+    def test_moveart_no_move(self):
+        self.reset_environment()
+
+        # move art not set, no art files should move
+        count_expected = 0
+        source, target = self.moveart_set()
+        target_files = glob.glob(os.path.join(target, '*.jpg'))
+        count_target = len(target_files)
+        self.failUnlessEqual(count_target, count_expected)
+
+    def test_moveart_move_defaults(self):
+        self.reset_environment()
+        config.set("rename", "move_art", True)
+
+        # single match for default search_filenames
+        # "cover.jpg,folder.jpg,.folder.jpg"
+        count_expected = 1
+        source, target = self.moveart_set()
+        target_files = glob.glob(os.path.join(target, '*.jpg'))
+        count_target = len(target_files)
+        self.failUnlessEqual(count_target, count_expected)
+
+    def test_moveart_move_all_wildcard(self):
+        self.reset_environment()
+        config.set("rename", "move_art", True)
+        config.set("albumart", "search_filenames", "*.jpg")
+
+        # wildcard added to search_filenames for catchall"
+        count_expected = 4
+        source, target = self.moveart_set()
+        target_files = glob.glob(os.path.join(target, '*.jpg'))
+        count_target = len(target_files)
+        self.failUnlessEqual(count_target, count_expected)
+
+    def test_moveart_move_escape_glob_characters(self):
+        self.reset_environment()
+        config.set("rename", "move_art", True)
+        config.set("albumart", "search_filenames", "*.jpg")
+        self.filenames = ['artist_[x].jpg']
+
+        # test whether we cope with non-escaped special glob characters"
+        count_expected = 1
+        source, target = self.moveart_set()
+        target_files = glob.glob(os.path.join(target, '*.jpg'))
+        count_target = len(target_files)
+        self.failUnlessEqual(count_target, count_expected)
+
+    def test_moveart_relative_pattern(self):
+        self.reset_environment()
+        config.set("rename", "move_art", True)
+        config.set("albumart", "search_filenames", "*.jpg")
+
+        # should be a no-op"
+        count_expected = 4
+        source, target = self.moveart_set(target='')
+        target_files = glob.glob(os.path.join(target, '*.jpg'))
+        count_target = len(target_files)
+        self.failUnlessEqual(count_target, count_expected)
+
+    def test_moveart_selective_pattern(self):
+        self.reset_environment()
+        config.set("rename", "move_art", True)
+        config.set("albumart", "search_filenames", "<artist>.jpg")
+        self.filenames = ['cover.jpg', 'artist.jpg']
+
+        # should be a no-op
+        count_expected = 1
+        source, target = self.moveart_set(target='')
+        target_files = glob.glob(os.path.join(target, '*.jpg'))
+        count_target = len(target_files)
+        self.failUnlessEqual(count_target, count_expected)
+
+    def test_moveart_overwrite(self):
+        self.reset_environment()
+        config.set("rename", "move_art", True)
+        config.set("albumart", "search_filenames", "*.jpg")
+        self.filenames = ['art.jpg']
+
+        # move set
+        source, target = self.moveart_set()
+        # fail as target audio already exists
+        self.assertRaises(Exception, self.moveart_set())
+
+        # remove audio
+        os.remove(os.path.join(target, 'title_1.mp3'))
+
+        # move exising target art to .orig suffix
+        count_expected = 2
+        self.moveart_set()
+        target_files = glob.glob(os.path.join(target, '*jpg*'))
+        count_target = len(target_files)
+        self.failUnlessEqual(count_target, count_expected)
+
+        # remove audio
+        os.remove(os.path.join(target, 'title_1.mp3'))
+        os.remove(os.path.join(target, 'art.jpg.orig'))
+        config.set("rename", "move_art_overwrite", True)
+
+        # overwrite existing target arg
+        count_expected = 1
+        self.moveart_set()
+        target_files = glob.glob(os.path.join(target, '*jpg*'))
+        count_target = len(target_files)
+        self.failUnlessEqual(count_target, count_expected)
+
+    def test_moveart_multi_source(self):
+        self.reset_environment()
+        config.set("rename", "move_art", True)
+        config.set("albumart", "search_filenames", "*.jpg")
+
+        source, target = \
+            self.source_target(self.root_path, 'artist', 'album')
+        source2, target2 = \
+            self.source_target(self.root_path, 'artist', 'album2')
+
+        self.filenames = ['art.jpg']
+        self.art_set(source)
+        self.filenames = ['art2.jpg']
+        self.art_set(source2)
+
+        song_files, songs = self.song_set(source)
+        song_files2, songs2 = self.song_set(source2)
+
+        self.renamer.add_songs(songs + songs2)
+
+        # avoid audio file clashes
+        pattern = os.path.join(target, '[<album>] artist - <title>')
+        self.renamer.rename(pattern, songs + songs2)
+
+        # album art sets merged
+        count_expected = 2
+        self.moveart_set()
+        target_files = glob.glob(os.path.join(target, '*.jpg'))
+        count_target = len(target_files)
+        self.failUnlessEqual(count_target, count_expected)
-- 
1.8.4

