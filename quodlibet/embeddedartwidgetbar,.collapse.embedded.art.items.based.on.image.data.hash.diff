From 513404384b2bb6b342e0c578a19004fd7d17e2ad Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Thu, 5 Oct 2017 07:15:31 +0100
Subject: embeddedartwidgetbar, collapse embedded art items based on
 image data hash

---
 .../quodlibet/ext/covers/embeddedart_widgetbar.py  | 385 +++++++++++++++++----
 1 file changed, 319 insertions(+), 66 deletions(-)

diff --git a/quodlibet/quodlibet/ext/covers/embeddedart_widgetbar.py b/quodlibet/quodlibet/ext/covers/embeddedart_widgetbar.py
index 90a2045c3..66b2c3e60 100644
--- a/quodlibet/quodlibet/ext/covers/embeddedart_widgetbar.py
+++ b/quodlibet/quodlibet/ext/covers/embeddedart_widgetbar.py
@@ -7,6 +7,7 @@
 
 import os
 import hashlib
+from itertools import groupby
 from senf import path2fsn
 from gi.repository import Gtk, Gdk, GLib, GObject
 
@@ -16,7 +17,7 @@ from quodlibet.plugins import PluginConfig, BoolConfProp
 from quodlibet.plugins.events import EventPlugin
 from quodlibet.plugins.gui import UserInterfacePlugin
 from quodlibet.formats import EmbeddedImage
-from quodlibet.qltk import Icons, add_global_css
+from quodlibet.qltk import Icons, add_global_css, add_css, gtk_version
 from quodlibet.qltk.widgetbar import WidgetBar
 from quodlibet.qltk.x import Align, ScrolledWindow
 from quodlibet.util import print_d, print_exc
@@ -37,6 +38,7 @@ class Config(object):
     name_in_label = BoolConfProp(_config, "name_in_label", True)
     size_in_label = BoolConfProp(_config, "size_in_label", False)
     size_in_tooltip = BoolConfProp(_config, "size_in_tooltip", True)
+    collapsed_view = BoolConfProp(_config, "collapsed_view", False)
 
 
 CONFIG = Config()
@@ -46,6 +48,10 @@ DOUBLE_CLICK_TIMEOUT = 200
 class SignalBox(GObject.GObject):
 
     __gsignals__ = {
+        "subselect-count-changed":
+        (GObject.SignalFlags.RUN_LAST, None, [int]),
+        "subtotal-count-changed":
+        (GObject.SignalFlags.RUN_LAST, None, [int]),
         "select-count-changed":
         (GObject.SignalFlags.RUN_LAST, None, [int]),
         "total-count-changed":
@@ -54,7 +60,8 @@ class SignalBox(GObject.GObject):
 
 
 class ImageItem(object):
-    def __init__(self, name, path, artist, album, width, height, external):
+    def __init__(self, name, path, artist, album,
+                 width, height, external, data_hash):
         self.name = name
         self.path = path
         self.artist = artist
@@ -62,6 +69,7 @@ class ImageItem(object):
         self.width = width
         self.height = height
         self.external = external
+        self.data_hash = data_hash
 
     def key(self):
         return "|".join([self.artist, self.album, str(self.external)])
@@ -97,6 +105,26 @@ class EmbeddedArtBox(Gtk.HBox):
 
         self.select_count = 0
         self.total_count = len(self.image_widgets)
+        if CONFIG.collapsed_view:
+            self._collapse_toggle(CONFIG.collapsed_view)
+
+    @property
+    def subselect_count(self):
+        return self.__covers_subselect_count
+
+    @subselect_count.setter
+    def subselect_count(self, value):
+        self.__covers_subselect_count = value
+        self.signalbox.emit('subselect-count-changed', value)
+
+    @property
+    def subtotal_count(self):
+        return self.__covers_subtotal_count
+
+    @subtotal_count.setter
+    def subtotal_count(self, value):
+        self.__covers_subtotal_count = value
+        self.signalbox.emit('subtotal-count-changed', value)
 
     @property
     def select_count(self):
@@ -116,20 +144,35 @@ class EmbeddedArtBox(Gtk.HBox):
         self.__covers_total_count = value
         self.signalbox.emit('total-count-changed', value)
 
-    def get_selected_widgets(self):
+    def get_visible_widgets(self):
         return [w for w in self.get_children()
+                    if w.get_visible()]
+
+    def get_selected_widgets(self):
+        return [w for w in self.get_visible_widgets()
                     if w.image_widget.is_selected]
 
     def get_selected_image_widgets(self):
-        return [w.image_widget for w in self.get_selected_widgets()]
+        return [iw for w in self.get_selected_widgets()
+                       for iw in w.image_widget.nested
+                           if w.image_widget.nested_active[iw]]
+
+    def update_subselect_count(self):
+        self.subselect_count = \
+            len(self.get_selected_image_widgets())
+
+    def update_subtotal_count(self):
+        self.subtotal_count = len(self.image_widgets)
 
     def update_select_count(self):
         self.select_count = sum(1 for w in self.get_selected_widgets())
 
     def update_total_count(self):
-        self.total_count = len(self.image_widgets)
+        self.total_count = sum(1 for w in self.get_visible_widgets())
 
     def update_counts(self):
+        self.update_subselect_count()
+        self.update_subtotal_count()
         self.update_select_count()
         self.update_total_count()
 
@@ -141,7 +184,8 @@ class EmbeddedArtBox(Gtk.HBox):
     def __cover_click_single(self, coverimage):
         if self.__double_clicked:
             return False
-        box = coverimage.get_parent()
+        box = coverimage.box
+
         box.highlight_toggle(box)
         return False
 
@@ -158,6 +202,45 @@ class EmbeddedArtBox(Gtk.HBox):
             self.__cover_click_double(coverimage)
         return True
 
+    def _collapse_toggle(self, collapsed):
+        if not self.total_count:
+            return
+
+        data_hashes = {}
+        if collapsed:
+            # songs sharing the same image share a single container
+            for w in self.get_children():
+                iw = w.image_widget
+                h = iw.image.data_hash
+                if h in data_hashes:
+                    data_hashes[h].nested.append(iw)
+                    data_hashes[h].nested_active[iw] = iw.is_selected
+                    w.hide()
+                else:
+                    iw.nested = [iw]
+                    iw.nested_active[iw] = iw.is_selected
+                    data_hashes[h] = iw
+
+            for key, iw in data_hashes.items():
+                iw.highlight_toggle(iw, False)
+                iw.collapsed(iw, True)
+
+        else:
+            # flat display, one image to one (non-distinct) song
+            iw_active = \
+                {iw2: w.image_widget.nested_active[iw2]
+                     for w in self.get_visible_widgets()
+                         for iw2 in w.image_widget.nested}
+            for w in self.get_children():
+                iw = w.image_widget
+                iw.nested = [iw]
+                iw.collapsed(iw, False)
+                if iw in iw_active:
+                    iw.highlight_toggle(iw, iw_active[iw])
+                w.show()
+
+        self.update_counts()
+
     def __generate_covers(self, imageitems, song):
         if len(self.image_widgets) + len(imageitems) >= self.covers_max:
             if self.image_widgets < self.covers_max:
@@ -179,16 +262,33 @@ class EmbeddedArtBox(Gtk.HBox):
             fo = open(fsn, "rb")
             coverimage.set_image(fo, name, image.external)
 
-            image_widget = Gtk.VBox()
+            image_widget = Gtk.HBox(spacing=0, homogeneous=False)
+            image_widget_cover_box = Gtk.VBox()
+            image_widget.pack_start(image_widget_cover_box, False, True, 2)
+            image_widget_songlist_scroll = ScrolledWindow()
+            image_widget_songlist_scroll.set_policy(
+                Gtk.PolicyType.NEVER, Gtk.PolicyType.AUTOMATIC)
+            image_widget_songlist_scroll.set_shadow_type(Gtk.ShadowType.NONE)
+
+            image_widget_songlist_box = Gtk.VBox()
+            image_widget_songlist_scroll.add(image_widget_songlist_box)
+            image_widget_songlist_scroll.show_all()
+            image_widget.songlist = image_widget_songlist_box
+            image_widget.songlist.widgets = {}
+            image_widget.pack_start(
+                image_widget_songlist_scroll, False, True, 0)
+
             image_widget.image = image
             image_widget.song = song
+            image_widget.nested = [image_widget]
+            image_widget.nested_active = {image_widget: False}
             image_widget.cover = coverimage
             image_widget.image_title = title
             image_widget.image_name = name
             image_widget.image_size = size
             image_widget.is_selected = False
 
-            image_widget.pack_start(coverimage, True, True, 2)
+            image_widget_cover_box.pack_start(coverimage, True, True, 2)
 
             image_widget_hborder = Gtk.HBox()
             image_widget_hborder.pack_start(
@@ -200,23 +300,88 @@ class EmbeddedArtBox(Gtk.HBox):
             image_widget_outer = Gtk.EventBox()
             image_widget_outer.add(image_widget_vborder)
 
-            def highlight_toggle(box):
+            def highlight_toggle(box, force_highlight=None):
                 scv = box.vborder.get_style_context()
                 sch = box.hborder.get_style_context()
-                if scv.has_class('highlightbox'):
+                if force_highlight is False or \
+                    (scv.has_class('highlightbox') and
+                     force_highlight is not True):
                     scv.remove_class('highlightbox')
                     sch.remove_class('highlightbox')
                     box.is_selected = False
                 else:
-                    scv.add_class('highlightbox')
-                    sch.add_class('highlightbox')
+                    if not scv.has_class('highlightbox'):
+                        scv.add_class('highlightbox')
+                        sch.add_class('highlightbox')
                     box.is_selected = True
                 self.update_select_count()
+                self.update_subselect_count()
 
             image_widget.vborder = image_widget_vborder
             image_widget.hborder = image_widget_hborder
             image_widget.highlight_toggle = highlight_toggle
 
+            def collapsed(widget, visible):
+                if visible:
+                    # (re)build song list
+                    def song_toggled(w, w2, active):
+                        w.nested_active[w2] = active
+                        self.update_subselect_count()
+
+                    for w in widget.songlist.get_children():
+                        widget.songlist.remove(w)
+                    widget.songlist.set_size_request(200, -1)
+                    widget.get_parent().check_resize()
+                    for k, g in groupby(widget.nested,
+                                        lambda w: w.song['album']):
+                        album_label = Gtk.Label(k)
+                        album_label.set_alignment(0.0, 0.5)
+                        album_label.get_style_context()\
+                            .add_class("boldandbig2")
+                        widget.songlist.pack_start(album_label,
+                                                   False, False, 2)
+                        for iw2 in sorted(g, key=lambda iw:
+                                                        iw.song("~#track")):
+                            s = iw2.song
+                            track = s('~#track')
+                            label = "%s%s" % (str(track) + ' | '
+                                              if track else "",
+                                              s['title'])
+                            cb = Gtk.CheckButton(label)
+                            cb_align = Align(left=10)
+                            cb_align.add(cb)
+                            cb.get_child().set_line_wrap(True)
+                            cb.set_tooltip_markup(s['~filename'])
+                            cb.connect("toggled",
+                                lambda w, iw=widget, iw2=iw2, *_:
+                                    song_toggled(iw, iw2, w.get_active()))
+                            cb.set_active(widget.nested_active[iw2])
+                            widget.songlist.pack_start(cb_align,
+                                                       False, False, 0)
+                            widget.songlist.widgets[iw2] = cb
+                            if gtk_version >= (3, 20):
+                                add_css(cb, """
+                                    .checkbutton indicator {
+                                        min-height: 10px;
+                                        min-width: 10px;
+                                    }""", True)
+                            else:
+                                add_css(cb, """
+                                    GtkCheckButton {
+                                        -GtkCheckButton-indicator-size: 10;
+                                    }""", True)
+
+                    widget.label.hide()
+                    widget.songlist.get_parent().show_all()
+                else:
+                    widget.nested = [widget]
+                    widget.nested_active = {widget: True}
+                    widget.songlist.set_size_request(-1, -1)
+                    widget.songlist.hide()
+                    widget.label.show()
+
+            image_widget.collapsed = collapsed
+
             tooltip = []
             if CONFIG.size_in_tooltip:
                 tooltip.append(size)
@@ -232,11 +397,12 @@ class EmbeddedArtBox(Gtk.HBox):
             label_desc.set_use_markup(True)
             label_desc.set_tooltip_markup(image.path)
             image_widget.label = label_desc
-            image_widget.pack_start(label_desc, False, True, 4)
+            image_widget_cover_box.pack_start(label_desc, False, True, 4)
 
             image_widget_outer_align = Align(bottom=15)
             image_widget_outer_align.add(image_widget_outer)
 
+            coverimage.box = image_widget
             image_widget_outer_align.image_widget = image_widget
             image_widget.outer = image_widget_outer_align
 
@@ -246,7 +412,7 @@ class EmbeddedArtBox(Gtk.HBox):
             image_widget_outer_align.connect(
                 "button-press-event", highlight_toggle_cb)
 
-            self.pack_start(image_widget_outer_align, True, False, 5)
+            self.pack_start(image_widget_outer_align, False, False, 2)
 
             self.image_widgets.append(image_widget)
 
@@ -313,8 +479,10 @@ class EmbeddedArtBox(Gtk.HBox):
                     if dump and not self.dump_file(i, f):
                         continue
                     width, height = self.get_info(f)
-                    imageitems.append(ImageItem(f, pathfile, artist, album,
-                                                width, height, False))
+                    data_hash = hashlib.md5(i.read()).hexdigest()
+                    imageitems.append(
+                        ImageItem(f, pathfile, artist, album,
+                                  width, height, False, data_hash))
 
         return imageitems
 
@@ -377,77 +545,114 @@ class EmbeddedArtBox(Gtk.HBox):
         self.update_select_count()
         self.total_count = len(self.image_widgets)
 
+    def _remove_widget_by_song(self, song):
+        for outer in self.get_children():
+            w = outer.image_widget
+            if len(w.nested) == 1:
+                if w.nested[0].song == song:
+                    self._remove_widget_by_image_widget(w)
+            else:
+                for idx in xrange(len(w.nested) - 1, -1, -1):
+                    if w.nested[idx].song == song:
+                        del w.nested[idx]
+                        del w.nested_active[w]
+                        w.songlist.remove(w.songlist.widgets[w])
+                        del w.songlist.widgets[w]
+
+    def _remove_widget_by_image(self, image):
+        for outer in self.get_children():
+            w = outer.image_widget
+            if not w.image == image:
+                continue
+
+            if len(w.nested) == 1:
+                self._remove_widget_by_image_widget(w)
+            else:
+                for idx in xrange(len(w.nested) - 1, -1, -1):
+                    if w.nesteds[idx].image == image:
+                        del w.nested[idx]
+                        del w.nested_active[w]
+                        w.songlist.remove(w.songlist.widgets[w])
+                        del w.songlist.widgets[w]
+
     def _clear_images(self):
 
-        for w in self.get_selected_image_widgets():
-            if not w.song.can_change_images:
-                ext = os.path.splitext(w.song['~filename'])[1][1:]
+        for s in [iw.song for iw in self.get_selected_image_widgets()]:
+            if not s.can_change_images:
+                ext = os.path.splitext(s['~filename'])[1][1:]
                 print_d("skipping unsupported song type %r [%s]"
-                        % (ext, w.song['~filename']))
+                        % (ext, s['~filename']))
                 continue
             try:
-                w.song.clear_images()
-                self._remove_widget_by_image_widget(w)
+                s.clear_images()
+                self._remove_widget_by_song(s)
             except AudioFileError:
                 print_exc()
 
     def _remove_image(self):
 
-        for w in self.get_selected_image_widgets():
-            if not w.song.can_change_images:
-                ext = os.path.splitext(w.song['~filename'])[1][1:]
+        for iw in self.get_selected_image_widgets():
+            s = iw.song
+            if not s.can_change_images:
+                ext = os.path.splitext(s['~filename'])[1][1:]
                 print_d("skipping unsupported song type %r [%s]"
-                        % (ext, w.song['~filename']))
+                        % (ext, s['~filename']))
                 continue
 
-            images = w.song.get_images()
+            images = s.get_images()
             if len(images) == 1:
                 try:
-                    w.song.clear_images()
-                    self._remove_widget_by_image_widget(w)
+                    s.clear_images()
+                    self._remove_widget_by_song(s)
                 except AudioFileError:
                     print_exc()
             else:
                 # iterate and compare to find this image
-
-                fo = open(w.image.name, 'rb')
+                fo = open(iw.image.name, 'rb')
                 for image in images:
-                    if self.__file_equals_embeddedimage(fo, image):
-                        try:
-                            if not w.song.remove_image(image):
-                                print_d("failed to remove image for song %r"
-                                        % w.song)
-                        except AudioFileError:
-                            print_exc()
-                        break
+                    if not self.__file_equals_embeddedimage(fo, image):
+                        continue
+                    try:
+                        if s.remove_image(image):
+                            self._remove_widget_by_image(image)
+                        else:
+                            print_d("failed to remove image for song %r"
+                                    % s)
+                    except AudioFileError:
+                        print_exc()
+                    break
 
     def _set_image(self):
 
-        for w in self.get_selected_image_widgets():
-            if not w.song.can_change_images:
-                ext = os.path.splitext(w.song['~filename'])[1][1:]
+        for w in [w2 for w in self.get_selected_image_widgets()
+                         for w2 in w.nested]:
+            s = w.song
+            if not s.can_change_images:
+                ext = os.path.splitext(s['~filename'])[1][1:]
                 print_d("skipping unsupported song type %r [%s]"
-                        % (ext, w.song['~filename']))
+                        % (ext, s['~filename']))
                 continue
-            fh = app.cover_manager.get_cover(w.song)
+            fh = app.cover_manager.get_cover(s)
             if not fh:
                 print_d("no cover image available for song %r"
-                        % (w.song['~filename']))
+                        % (s['~filename']))
                 continue
             pathfile = fh.name
             image = EmbeddedImage.from_path(pathfile)
             if not image:
                 print_d("error creating embedded image %r for song %r"
-                        % (pathfile, w.song['~filename']))
+                        % (pathfile, s['~filename']))
                 continue
             try:
-                w.song.set_image(image)
+                s.set_image(image)
             except AudioFileError:
                 print_exc()
 
     def _add_image(self):
 
         pathfiles = self._choose_art_files()
+        if not pathfiles:
+            return
 
         images = []
         for pathfile in pathfiles:
@@ -457,16 +662,16 @@ class EmbeddedArtBox(Gtk.HBox):
                 continue
             images.append(image)
 
-        for w in self.get_selected_image_widgets():
-            if not w.song.can_change_images:
-                ext = os.path.splitext(w.song['~filename'])[1][1:]
+        for s in [iw.song for iw in self.get_selected_image_widgets()]:
+            if not s.can_change_images:
+                ext = os.path.splitext(s['~filename'])[1][1:]
                 print_d("skipping unsupported song type %r [%s]"
-                        % (ext, w.song['~filename']))
+                        % (ext, s['~filename']))
                 continue
 
             for image in images:
                 try:
-                    w.song.add_image(image)
+                    s.add_image(image)
                 except AudioFileError:
                     print_exc()
 
@@ -553,15 +758,27 @@ class EmbeddedArtWidgetBarPlugin(UserInterfacePlugin, EventPlugin):
         self.labels_select_box.pack_start(Gtk.VSeparator(), False, False, 2)
         self.label_count_select = Gtk.Label()
         self.label_count_select.get_style_context().add_class("boldandbig1")
-        self.label_count_box.pack_start(
+        self.labels_select_box.pack_start(
             self.label_count_select, False, False, 0)
-        self.label_count_separator = Gtk.Label()
-        self.label_count_box.pack_start(
-            self.label_count_separator, False, False, 0)
+        self.labels_select_box.pack_start(Gtk.Label("of"), False, False, 2)
         self.label_count_total = Gtk.Label()
         self.label_count_total.get_style_context().add_class("boldandbig2")
-        self.label_count_box.pack_start(
+        self.labels_select_box.pack_start(
             self.label_count_total, False, False, 0)
+        self.labels_select_box.show_all()
+        self.labels_select_box.set_no_show_all(True)
+        self.labels_select_box.set_visible(False)
+
+        self.labels_noselect_box = Gtk.HBox()
+        label_count_box.pack_start(self.labels_noselect_box, False, False, 0)
+        self.labels_noselect_box.pack_start(Gtk.VSeparator(), False, False, 2)
+        self.label_count_noselect = Gtk.Label()
+        self.label_count_noselect.get_style_context().add_class("boldandbig1")
+        self.labels_noselect_box.pack_start(
+            self.label_count_noselect, False, False, 0)
+        self.labels_noselect_box.show_all()
+        self.labels_noselect_box.set_no_show_all(True)
+        self.labels_noselect_box.set_visible(False)
 
         align_covers = Gtk.Alignment(xalign=0.5, xscale=1.0)
         self.__embeddedart_box = EmbeddedArtBox()
@@ -569,6 +786,12 @@ class EmbeddedArtWidgetBarPlugin(UserInterfacePlugin, EventPlugin):
         self.__content.pack_start(align_covers, True, True, 0)
         self.__content.show_all()
 
+        self.__embeddedart_box.signalbox.connect(
+            'subselect-count-changed',
+            self.__embeddedart_on_subselect_count_changed)
+        self.__embeddedart_box.signalbox.connect(
+            'subtotal-count-changed',
+            self.__embeddedart_on_subtotal_count_changed)
         self.__embeddedart_box.signalbox.connect(
             'select-count-changed',
             self.__embeddedart_on_select_count_changed)
@@ -618,8 +841,20 @@ class EmbeddedArtWidgetBarPlugin(UserInterfacePlugin, EventPlugin):
             lambda *_: self.__embeddedart_box._add_image())
         self.__controls_box.pack_start(add_button, False, False, 5)
 
+        collapse_ccb = ConfigCheckButton("Collapse", "plugins",
+                                         plugin_id + "_collapsed_view",
+                                         populate=True)
+        collapse_ccb.set_tooltip_text(_(u"collapse compatible images"))
+        collapse_ccb.connect("toggled",
+            lambda w, *_:
+                self.__embeddedart_box._collapse_toggle(w.get_active()))
+        self.__controls_box_outer.pack_end(collapse_ccb, False, False, 5)
+
+        self.__subselect_count = 0
+        self.__subtotal_count = 0
         self.__select_count = 0
         self.__total_count = 0
+        self.__noselect_count = 0
         self.__update_count()
 
         self.live = True
@@ -627,21 +862,37 @@ class EmbeddedArtWidgetBarPlugin(UserInterfacePlugin, EventPlugin):
         return self.__widgetbar
 
     def __update_count(self):
-        if self.__total_count:
-            self.label_count_select.set_text(str(self.__select_count))
-            self.label_count_total.set_text(str(self.__total_count))
-            self.label_count_separator.set_text(" of ")
-        else:
-            self.label_count_select.set_text("")
-            self.label_count_total.set_text("")
-            self.label_count_separator.set_text("")
+        self.label_count_subselect.set_text(str(self.__subselect_count))
+        self.label_count_subtotal.set_text(str(self.__subtotal_count))
+        self.label_count_select.set_text(str(self.__select_count))
+        self.label_count_total.set_text(str(self.__total_count))
+        self.label_count_noselect.set_text(str(self.__noselect_count))
+
+        self.labels_subselect_box.set_visible(False)
+        self.labels_select_box.set_visible(False)
+        self.labels_noselect_box.set_visible(False)
+
+        if self.__noselect_count:
+            self.labels_noselect_box.set_visible(True)
+            if self.__total_count:
+                self.labels_select_box.set_visible(True)
+                if CONFIG.collapsed_view:
+                    self.labels_subselect_box.set_visible(True)
 
         map(lambda w, s=False if self.__select_count == 0
                               else True:
                 w.set_sensitive(s),
             self.__controls_box.get_children())
 
-    def __embeddedart_on_select_count_changed(self, ojbect, count):
+    def __embeddedart_on_subselect_count_changed(self, object, count):
+        self.__subselect_count = count
+        self.__update_count()
+
+    def __embeddedart_on_subtotal_count_changed(self, object, count):
+        self.__subtotal_count = count
+        self.__update_count()
+
+    def __embeddedart_on_select_count_changed(self, object, count):
         self.__select_count = count
         self.__update_count()
 
@@ -650,9 +901,11 @@ class EmbeddedArtWidgetBarPlugin(UserInterfacePlugin, EventPlugin):
         self.__update_count()
 
     def plugin_on_songs_selected(self, songs):
+        self.__noselect_count = len(songs)
         if not self.live:
             return
         self.__embeddedart_box.update(songs)
+        self.__update_count()
 
     def __save(self):
         print_d("saving config data")
-- 
2.14.1

