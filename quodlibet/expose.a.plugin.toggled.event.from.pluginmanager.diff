From 8cecbcaa27d69b882a2910570486bd0f33a91225 Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Fri, 11 Aug 2017 07:00:56 +0100
Subject: expose a plugin toggled event from PluginManager

---
 quodlibet/quodlibet/main.py             |  6 +++--
 quodlibet/quodlibet/plugins/__init__.py | 12 ++++++++-
 quodlibet/quodlibet/plugins/events.py   | 47 +++++++++++++++++++++++----------
 3 files changed, 48 insertions(+), 17 deletions(-)

diff --git a/quodlibet/quodlibet/main.py b/quodlibet/quodlibet/main.py
index e0c507c..3866bbe 100644
--- a/quodlibet/quodlibet/main.py
+++ b/quodlibet/quodlibet/main.py
@@ -44,6 +44,7 @@ def main(argv=None):
     from quodlibet import config
     from quodlibet import browsers
     from quodlibet import util
+    from quodlibet.plugins import PluginManager
 
     app.name = "Quod Libet"
     app.id = "quodlibet"
@@ -140,8 +141,9 @@ def main(argv=None):
 
     from quodlibet.plugins.events import EventPluginHandler
     from quodlibet.plugins.gui import UserInterfacePluginHandler
-    pm.register_handler(EventPluginHandler(library.librarian, player,
-                                           app.window.songlist))
+    pm.register_handler(
+        EventPluginHandler(library.librarian, player,
+                           app.window.songlist, PluginManager.instance))
     pm.register_handler(UserInterfacePluginHandler())
 
     from quodlibet.mmkeys import MMKeysHandler
diff --git a/quodlibet/quodlibet/plugins/__init__.py b/quodlibet/quodlibet/plugins/__init__.py
index 101ba54..d89aeb4 100644
--- a/quodlibet/quodlibet/plugins/__init__.py
+++ b/quodlibet/quodlibet/plugins/__init__.py
@@ -5,6 +5,8 @@
 # it under the terms of the GNU General Public License version 2 as
 # published by the Free Software Foundation
 
+from gi.repository import GObject
+
 from quodlibet import _
 from quodlibet import config
 from quodlibet import util
@@ -192,7 +194,7 @@ class PluginHandler(object):
         raise NotImplementedError
 
 
-class PluginManager(object):
+class PluginManager(GObject.GObject):
     """
     The manager takes care of plugin loading/reloading. Interested plugin
     handlers can register them self to get called when plugins get enabled
@@ -227,6 +229,12 @@ class PluginManager(object):
 
     instance = None  # default instance
 
+    __gsignals__ = {
+        # model, iter, enabled
+        "plugin-toggled": (GObject.SignalFlags.RUN_LAST, None,
+                           (object, bool))
+    }
+
     def __init__(self, folders=None):
         """folders is a list of paths that will be scanned for plugins.
         Plugins in later paths will be preferred if they share a name.
@@ -351,6 +359,7 @@ class PluginManager(object):
                     instance.disabled()
                 except Exception:
                     util.print_exc()
+            self.emit("plugin-toggled", plugin, True)
         else:
             print_d("Enable %r" % plugin.id)
             obj = plugin.get_instance()
@@ -362,6 +371,7 @@ class PluginManager(object):
             for handler in plugin.handlers:
                 handler.plugin_enable(plugin)
             self.__enabled.add(plugin.id)
+            self.emit("plugin-toggled", plugin, False)
 
     @property
     def failures(self):
diff --git a/quodlibet/quodlibet/plugins/events.py b/quodlibet/quodlibet/plugins/events.py
index ab5eec9..8a01a18 100644
--- a/quodlibet/quodlibet/plugins/events.py
+++ b/quodlibet/quodlibet/plugins/events.py
@@ -1,6 +1,7 @@
 # -*- coding: utf-8 -*-
 # Copyright 2005 Michael Urman, Joe Wreschnig
 #           2014, 2017 Nick Boultbee
+#           2017 Pete Beardmore
 #
 # This program is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License version 2 as
@@ -11,6 +12,7 @@ from gi.repository import GObject
 from quodlibet.util.dprint import print_e
 
 from quodlibet.plugins import PluginHandler
+from quodlibet.library.librarians import SongLibrarian
 
 from quodlibet.util.songwrapper import SongWrapper, ListWrapper
 from quodlibet.util.songwrapper import check_wrapper_changed
@@ -59,6 +61,9 @@ class EventPlugin(object):
         """Called when the selection in main songlist changes"""
         pass
 
+    def plugin_on_plugin_toggled(self, plugin, enabled):
+        pass
+
     PLUGIN_INSTANCE = True
 
     def enabled(self):
@@ -97,7 +102,8 @@ def _map_signals(obj, prefix="plugin_on_", blacklist=None):
 
 class EventPluginHandler(PluginHandler):
 
-    def __init__(self, librarian=None, player=None, songlist=None):
+    def __init__(self, librarian=None, player=None,
+                 songlist=None, pluginmanager=None):
         if librarian:
             sigs = _map_signals(librarian, blacklist=("notify",))
             for event, handle in sigs:
@@ -118,17 +124,28 @@ class EventPluginHandler(PluginHandler):
                 self.__invoke(self.librarian, "songs_selected", songs)
             songlist.connect("selection-changed", __selection_changed_cb)
 
+        if pluginmanager:
+            def __plugin_toggled_cb(pluginmanager, plugin, enabled):
+                self.__invoke(None, "plugin-toggled", plugin, enabled)
+            pluginmanager.connect("plugin-toggled", __plugin_toggled_cb)
+
         self.librarian = librarian
         self.__plugins = {}
         self.__sidebars = {}
 
-    def __invoke(self, librarian, event, *args):
+    def __invoke(self, target, event, *args):
         args = list(args)
-        if args and args[0]:
-            if isinstance(args[0], dict):
-                args[0] = SongWrapper(args[0])
-            elif isinstance(args[0], (set, list)):
-                args[0] = ListWrapper(args[0])
+
+        # prep args
+        if isinstance(target, SongLibrarian):
+            librarian = target
+            if args and args[0]:
+                if isinstance(args[0], dict):
+                    args[0] = SongWrapper(args[0])
+                elif isinstance(args[0], (set, list)):
+                    args[0] = ListWrapper(args[0])
+
+        # look for overrides in handled plugins
         for plugin in listvalues(self.__plugins):
             method_name = 'plugin_on_' + event.replace('-', '_')
             handler = getattr(plugin, method_name, None)
@@ -136,6 +153,7 @@ class EventPluginHandler(PluginHandler):
             def overridden(obj, name):
                 return name in type(obj).__dict__
 
+            # call override
             if overridden(plugin, method_name):
                 try:
                     handler(*args)
@@ -144,13 +162,14 @@ class EventPluginHandler(PluginHandler):
                             (method_name, type(plugin)))
                     errorhook()
 
-        if event not in ["removed", "changed"] and args:
-            from quodlibet import app
-            songs = args[0]
-            if not isinstance(songs, (set, list)):
-                songs = [songs]
-            songs = filter(None, songs)
-            check_wrapper_changed(librarian, app.window, songs)
+        if isinstance(target, SongLibrarian):
+            if event not in ["removed", "changed"] and args:
+                from quodlibet import app
+                songs = args[0]
+                if not isinstance(songs, (set, list)):
+                    songs = [songs]
+                songs = filter(None, songs)
+                check_wrapper_changed(librarian, app.window, songs)
 
     def plugin_handle(self, plugin):
         return issubclass(plugin.cls, EventPlugin)
-- 
1.8.4

