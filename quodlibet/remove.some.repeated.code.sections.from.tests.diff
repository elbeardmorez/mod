From 5c3a269a0bb1c7c3b9d27d5135ef1d2dd49dfd13 Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Sat, 17 Mar 2018 15:04:29 +0000
Subject: remove some repeated code sections from tests

-nest test file creation within a setup context
---
 quodlibet/tests/test_formats__audio.py | 142 +++++++++++++++------------------
 1 file changed, 63 insertions(+), 79 deletions(-)

diff --git a/quodlibet/tests/test_formats__audio.py b/quodlibet/tests/test_formats__audio.py
index 2670a1a10..08d6a6a0e 100644
--- a/quodlibet/tests/test_formats__audio.py
+++ b/quodlibet/tests/test_formats__audio.py
@@ -8,6 +8,7 @@ from tests import TestCase, get_data_path
 
 import os
 import io
+from contextlib import contextmanager
 from senf import fsnative, fsn2text, bytes2fsn, mkstemp, mkdtemp
 
 from quodlibet import config
@@ -418,6 +419,24 @@ class TAudioFile(TestCase):
         s['title'] = "Theme Tune"
         return s
 
+    @contextmanager
+    def lyric_filename_test_setup(self, no_config=False):
+
+        with temp_filename() as filename:
+            s = self.lyric_filename_search_test_song(filename)
+            root = os.path.dirname(filename)
+
+            if not no_config:
+                config.set("memory", "lyric_filenames",
+                           "<artist>.-.<title>,<artist> - <title>.lyrics_mod")
+            config.set("memory", "lyric_rootpaths", root)
+
+            s.root = root
+            yield s
+
+            if not no_config:
+                self.lyric_filename_search_clean_config()
+
     def lyric_filename_search_clean_config(self):
         """reset config to ensure other tests aren't affected"""
         config.remove_option("memory", "lyric_rootpaths")
@@ -425,29 +444,25 @@ class TAudioFile(TestCase):
 
     def test_lyric_filename_search_builtin_default(self):
         """test built-in default"""
-        with temp_filename() as filename:
-            s = self.lyric_filename_search_test_song(filename)
-            root = os.path.join(get_home_dir(), ".lyrics")
-            fp = os.path.join(root, s["artist"], s["title"] + ".lyric")
+        with self.lyric_filename_test_setup(no_config=True) as ts:
+            fp = os.path.join(ts.root, ts["artist"], ts["title"] + ".lyric")
             p = os.path.dirname(fp)
             mkdir(p)
             with io.open(fp, "w", encoding='utf-8') as f:
                 f.write(u"")
-            search = unquote(s.lyric_filename)
+            search = unquote(ts.lyric_filename)
             os.remove(fp)
             os.rmdir(p)
             self.assertEqual(search, fp)
 
     def test_lyric_filename_search_builtin_default_local_path(self):
         """test built-in default local path"""
-        with temp_filename() as filename:
-            s = self.lyric_filename_search_test_song(filename)
-            root = os.path.dirname(filename)
-            fp = os.path.join(root, s["artist"] + " - " +
-                                    s["title"] + ".lyric")
+        with self.lyric_filename_test_setup(no_config=True) as ts:
+            fp = os.path.join(ts.root, ts["artist"] + " - " +
+                                       ts["title"] + ".lyric")
             with io.open(fp, "w", encoding='utf-8') as f:
                 f.write(u"")
-            search = s.lyric_filename
+            search = ts.lyric_filename
             os.remove(fp)
             if is_windows():
                 fp = fp.lower()  # account for 'os.path.normcase' santisatation
@@ -456,99 +471,73 @@ class TAudioFile(TestCase):
 
     def test_lyric_filename_search_file_not_found(self):
         """test default file not found fallback"""
-        with temp_filename() as filename:
-            s = self.lyric_filename_search_test_song(filename)
-            config.set("memory", "lyric_filenames",
-                           "<artist>.-.<title>,<artist> - <title>.lyrics_mod")
-            root = os.path.dirname(filename)
-            config.set("memory", "lyric_rootpaths", root)
-            fp = os.path.join(root, s["artist"] + ".-." + s["title"])
-            search = unquote(s.lyric_filename)
+        with self.lyric_filename_test_setup() as ts:
+            fp = os.path.join(ts.root, ts["artist"] + ".-." + ts["title"])
+            search = unquote(ts.lyric_filename)
             self.assertEqual(search, fp)
-        self.lyric_filename_search_clean_config()
 
     def test_lyric_filename_search_custom_path(self):
         """test custom lyrics file location / naming"""
-        with temp_filename() as filename:
-            s = self.lyric_filename_search_test_song(filename)
-            config.set("memory", "lyric_filenames",
-                           "<artist>.-.<title>,<artist> - <title>.lyrics_mod")
-            root = os.path.dirname(filename)
-            config.set("memory", "lyric_rootpaths", root)
-
-            fp = os.path.join(root, s["artist"] + " - " +
-                                    s["title"] + ".lyric")
+        with self.lyric_filename_test_setup() as ts:
+            fp = os.path.join(ts.root, ts["artist"] + " - " +
+                                       ts["title"] + ".lyric")
             with io.open(fp, "w", encoding='utf-8') as f:
                 f.write(u"")
-            search = s.lyric_filename
+            search = ts.lyric_filename
             os.remove(fp)
             self.assertEqual(search, fp)
-        self.lyric_filename_search_clean_config()
 
     def test_lyric_filename_search_order_priority(self):
         """test custom lyrics order priority"""
-        with temp_filename() as filename:
-            s = self.lyric_filename_search_test_song(filename)
-            config.set("memory", "lyric_filenames",
-                           "<artist>.-.<title>,<artist> - <title>.lyrics_mod")
-            root = os.path.dirname(filename)
-            config.set("memory", "lyric_rootpaths", root)
+        with self.lyric_filename_test_setup() as ts:
             root2 = os.path.join(get_home_dir(), ".lyrics") # built-in default
-            fp2 = os.path.join(root2, s["artist"] + " - " +
-                                      s["title"] + ".lyric")
+            fp2 = os.path.join(root2, ts["artist"] + " - " +
+                                      ts["title"] + ".lyric")
             p2 = os.path.dirname(fp2)
             mkdir(p2)
             with io.open(fp2, "w", encoding='utf-8') as f:
                 f.write(u"")
-            fp = os.path.join(root, s["artist"] + " - " +
-                                    s["title"] + ".lyric")
+            fp = os.path.join(ts.root, ts["artist"] + " - " +
+                                       ts["title"] + ".lyric")
             with io.open(fp, "w", encoding='utf-8') as f:
                 f.write(u"")
             mkdir(p2)
-            search = s.lyric_filename
+            search = ts.lyric_filename
             os.remove(fp2)
             os.rmdir(p2)
             os.remove(fp)
             self.assertEqual(search, fp)
-        self.lyric_filename_search_clean_config()
 
     def test_lyric_filename_search_modified_extension_fallback(self):
         """test modified extension fallback search"""
-        with temp_filename() as filename:
-            s = self.lyric_filename_search_test_song(filename)
-            config.set("memory", "lyric_filenames",
-                           "<artist>.-.<title>,<artist> - <title>.lyrics_mod")
-            root = os.path.dirname(filename)
-            config.set("memory", "lyric_rootpaths", root)
-
-            fp = os.path.join(root, s["artist"] + " - " + s["title"] + ".txt")
+        with self.lyric_filename_test_setup() as ts:
+            fp = os.path.join(ts.root,
+                              ts["artist"] + " - " + ts["title"] + ".txt")
             with io.open(fp, "w", encoding='utf-8') as f:
                 f.write(u"")
-            search = s.lyric_filename
+            search = ts.lyric_filename
             os.remove(fp)
             self.assertEqual(search, fp)
-        self.lyric_filename_search_clean_config()
 
     def test_lyric_filename_search_special_characters(self):
         """test '<' and/or '>' in name (not parsed (transparent to test))"""
-        with temp_filename() as filename:
-            s = self.lyric_filename_search_test_song(filename)
-            root = os.path.dirname(filename)
+        with self.lyric_filename_test_setup(no_config=True) as ts:
+
+            path_variants = ['<oldskool>'] \
+                if is_windows() else ['\<artist\>', '\<artist>', '<artist\>']
 
-            path_variants = \
-                ['<oldskool>'] if is_windows() \
-                               else ['\<artist\>', '\<artist>', '<artist\>']
             for path_variant in path_variants:
-                s['artist'] = path_variant + " SpongeBob SquarePants"
-                parts = [root, s["artist"] + " - " + s["title"] + ".lyric"]
-                rpf = RootPathFile(root, os.path.sep.join(parts))
+                ts['artist'] = path_variant + " SpongeBob SquarePants"
+                parts = [ts.root,
+                         ts["artist"] + " - " + ts["title"] + ".lyric"]
+                rpf = RootPathFile(ts.root, os.path.sep.join(parts))
                 if not rpf.valid:
                     rpf = RootPathFile(rpf.root, rpf.pathfile_escaped)
                 self.assertTrue(rpf.valid,
                                 "even escaped target file is not valid")
                 with io.open(rpf.pathfile, "w", encoding='utf-8') as f:
                     f.write(u"")
-                search = s.lyric_filename
+                search = ts.lyric_filename
                 os.remove(rpf.pathfile)
                 fp = rpf.pathfile
                 if is_windows():
@@ -556,29 +545,25 @@ class TAudioFile(TestCase):
                     fp = fp.lower()
                     search = search.lower() # compensate for the above
                 self.assertEqual(search, fp)
-        self.lyric_filename_search_clean_config()
 
     def test_lyric_filename_search_special_characters_across_path(self):
         """test '<' and/or '>' in name across path separator (not parsed
         (transparent to test))"""
-        with temp_filename() as filename:
-            s = self.lyric_filename_search_test_song(filename)
-            root = os.path.dirname(filename)
-
+        with self.lyric_filename_test_setup(no_config=True) as ts:
             # test '<' and '>' in name across path
             # (not parsed (transparent to test))
-            s['artist'] = "a < b"
-            s['title'] = "b > a"
-            parts = [root, s["artist"], s["title"] + ".lyric"]
-            rpf = RootPathFile(root, os.path.sep.join(parts))
-            rootp = root
+            ts['artist'] = "a < b"
+            ts['title'] = "b > a"
+            parts = [ts.root, ts["artist"], ts["title"] + ".lyric"]
+            rpf = RootPathFile(ts.root, os.path.sep.join(parts))
+            rootp = ts.root
             rmdirs = []
             # ensure valid dir existence
             for p in rpf.end.split(os.path.sep)[:-1]:
-                rootp = os.path.sep.join([root, p])
-                if not RootPathFile(root, rootp).valid:
-                    rootp = os.path.sep.join([root, escape_filename(p)])
-                self.assertTrue(RootPathFile(root, rootp).valid,
+                rootp = os.path.sep.join([ts.root, p])
+                if not RootPathFile(ts.root, rootp).valid:
+                    rootp = os.path.sep.join([ts.root, escape_filename(p)])
+                self.assertTrue(RootPathFile(ts.root, rootp).valid,
                                 "even escaped target dir part is not valid!")
                 if not os.path.exists(rootp):
                     mkdir(rootp)
@@ -590,7 +575,7 @@ class TAudioFile(TestCase):
             with io.open(rpf.pathfile, "w", encoding='utf-8') as f:
                 f.write(u"")
             # search for lyric file
-            search = s.lyric_filename
+            search = ts.lyric_filename
             # clean up test lyric file / path
             os.remove(rpf.pathfile)
             for p in rmdirs:
@@ -601,7 +586,6 @@ class TAudioFile(TestCase):
                 fp = fp.lower()  # account for 'os.path.normcase' santisatation
                 search = search.lower()  # compensate for the above
             self.assertEqual(search, fp)
-        self.lyric_filename_search_clean_config()
 
     def test_lyrics_from_file(self):
         with temp_filename() as filename:
-- 
2.14.1

