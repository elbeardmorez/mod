# allow.configurable.custom.files.names.for.downloaded.art.diff [git sha:c09fb6f787cf9a701db542d648c9c308e69a809b | pending]

# expose.album.art.downloader.blackbox.diff [git sha:e6bf84b2599412924f9f01ecdb57a04a4c572e3d | pending]
the algorithm for construction of a final 'query to send'  based on user
input is imperfect. allow users to override this if the results are off
(e.g. missing words) whilst giving them insight into what's usually best.

# expose.album.art.downloader.query.results.limit.diff [git sha:6d15d03750fb8f668b43a17fa8a6412e7581a578 | pending]
-the current engine defaults of 5 and 3 for Amazon and Discogs respectively
 occassionally aren't enough to see the actual cover you want. this
 change allows for more results
-new overriding results limit takes the lower of current defaults - 3
-REQUEST_LIMIT_MAX is hardcoded as 15 so users can't do anything too crazy
-breaking change as it causes all engines to use the same user defined  limit

# move.album.art.when.renaming.[#237].diff [git sha:7cd099d5587c88b9bd84f67558342993a249b42a | pending]

# add.option.to.remove.empty.directories.post.rename.diff [git sha:94e4c199be65ef237ad323e1de38fd7b5c6d686d | pending]

# update.config.variable.names.diff [git sha:1b2ac52404e0a40b6dc4f4ca9c0c3743cc1b7854 | pending]

# code.purpose._.clarity.improvements.diff [git sha:121d31bd6d72de289784fe1669da895445b2de8e | pending]

# code.style.improvements.diff [git sha:13f510909cf40341d56e7987c01ffb934bd79fac | pending]

# filterpluginbox,.no_show_all.on.plugins.expander.diff [git sha:4b99a31a21e68569556c05edc1bacf9466643ef0 | pending]
-this facilitates show_all() calls on containers holding this widget
without exposing the 'More options..' expander for plugins which has
its own visibility logic triggered via its 'changed' signal callback
-verified no impact through toggling of the 'Regex Substitution' plugin

# split.rename.options.into.frames.diff [git sha:1f81bff5626d4d145aa9a116e083ba82fa88fd35 | pending]
-use separate 'File names' and 'Album art' frames to display sets
of options to make better use of dead space

# tests.for.moving.album.art.diff [git sha:bdf42f19e5ad1ba4f7b980014703cb564e44eca9 | pending]

# make.'lyric_filename()'.search.harder.diff [git sha:001c4273f159d9e4df858b906ee4ac596e371f68 | pending]
-search alternate extensions: 'lyrics', '', 'txt'
-add another default 'root'/'<artist> - <title>/lyric search path
-add support for lyrics filename configuration via two '[memory]'
config variables: 'lyric_rootpaths' and 'lyric_filenames'. song
variables can also be used in these comma delimited list values.
e.g.
lyric_filenames = <artist>.-.<title>,<artist> - <title>.lyrics_mod
lyric_rootpaths = ~/music/lyrics

# improve.code.readability.diff [git sha:ea13d39b5c48491c8764cb0d96c016305a6300e8 | pending]
-pull out duplicate string munging to separate 'sanitise' function

# avoid.trying.to.resolve.a.filename.unnecessarily.diff [git sha:408bb69874e1488f3f294bb461da6042feda80ea | pending]
-use a regular expression over trivial string comparison to
determine whether a potential filename contains a Quod Libet
placeholder (e.g. <title>)

# improve.code.readability.2.diff [git sha:e239bfed07490e9d2fd3a41711b4269092f230a6 | pending]
-pull out logic which creates the extended set of search paths
based on extension modification only to a 'generate_mod_ext_paths'
function
-add many more comments
-improve logging (commented by default)

# add.local.song.dir.to.default.search.paths.diff [git sha:a966b4c7b8d7587f242ca71f11c747aa3654f557 | pending]

# add.tests.diff [git sha:1e81c6f9c886709745e2cebc57282a4dfebf3112 | pending]
-test built-in default
-test built-in default local path
-test custom default (fnf fallback!)
-test user defined
-test order priority
-test modified extension fallback search
-test '<' and/or '>' in name
-test '<' and '>' in name across path

# use.custom.assert.to.avoid.error.truncation.diff [git sha:7aa28efcc79123e2ddc060447f6bc72412e194e3 | pending]

# adapt.for.case-insensitive.filesystems.diff [git sha:b0a9af94c66b2e49a278b88c4a0dcd6259f7a406 | pending]
-push filename escaping code path beyond the initial globbing
for existence
-make string comparison case insensitive in tests

# add.rootpathfile.utility.container.to.discern.file.parts.diff [git sha:ef4150fabbbb1cbf33cd84087a5909039524b974 | pending]
-simple container used for discerning a pathfile's 'root directory
part' from its 'end part'. the variable depth of a pathfile's 'end
part' (e.g. the part of the path constructed from song attributes)
renders  os.path built-ins (basename etc.) useless for this purpose
-optionally recover 'escaped' versions of the parts too

# compare.canonical.results.diff [git sha:06f41dbc8deecab03d790b3a4cb3fe64bc2ce507 | pending]
-fixes tests on darwin

# prefer.comprehensions.over.maps.diff [git sha:b4d2e9e58af2c7e4f87b187dad40cc6f5e98d82d | pending]

# add.debug.info.for.extended.search.match.diff [git sha:e0fed41c00f1be4092b131788271325f5815c128 | pending]

# make.'santitise()'.useful.on.all.platforms.diff [git sha:c8460c9d4e63eaf5372adc6a0512fa8a70bf74d7 | pending]

# improve.code.readability.3.diff [git sha:77cd6a8257324688eac394e73994bac84e54323c | pending]
-pull out 'expand_pathfile' code to separate function

# separate.all.tests.diff [git sha:4d0346495407304b0ca67c31b256b910e52705af | pending]

# prioritise.'special.char.encoded'.version.on.nt.diff [git sha:5876d95d476353ed527d49395ea7328796d34741 | pending]

# orientation.agnostic.names.diff [git sha:aa36c73cbd3d00fc051c2cdceacdc1f4671a8d11 | pending]

# exposed.multipaned.paned.set.diff [git sha:759f306db07154d1c19df499201c1f6fd49cf627 | pending]

# make.multirpaned.more.generic.diff [git sha:312d0a012a59097699c6563bf4a5b5d493a57441 | pending]
-add code path for absolute based sizing in 'make_pane_sizes_equal'
-update relevant test
-rename class to MultiPaned

# allow.custom.widget.packing.in.multipaned.diff [git sha:4f74e51555ea34c839166e89e6c9be789f1cbf2e | pending]

# add.'expander-aware'.x-paned.flavours.diff [git sha:68ab0cb64def1076780f36f89a9a74eefd19be9d | pending]
-adds XPaned base with H/V subclasses
-adds Multi XPaned H/V subclasses of MultiPaned
-implementation based on a single pane of 'x'-pane being set as
expandable. work is then done to ensure that pane takes any space given
by collapsed expanders, or resized panes
-PaneLock objects are embedded into widgets who want to lock their own
size during (necessarily) chaotic resizing operations
-fixing sizes manually AND allowing for manual resizing is difficult.
setting size requests locks the minimum pane sizes, which makes for
sensible resizing 'of the pane you'd expect to be resized', but doing so means
the panes cannot be made smaller. given the pane handle is unhookable in
any useful way (right down to the Gtk core), the 'nearly perfect'
workaround employed uses do_allocate_size to remove locks and button
releases to restore them. the unwanted result of this is that a resize
MUST start by making the pane at least 1px BIGGER, before making it
bigger OR smaller. in practice, this is not really noticable

# update.paned.definitions.diff [git sha:08a4979c6f86b4e2a42c05d3aef44c5a0cca07cf | pending]

# widgetbar.implementation.[#152.part].diff [git sha:e1b6c70567c574883581ea9b46e2b6b09eac9fce | pending]
-tied in as a UserInterfacePlugin

# expose.a.plugin.toggled.event.from.pluginmanager.diff [git sha:a7d61b1a2e7fa29a9a52285e2619d6af09b4fded | pending]

# simple.widgetbars.eventplugin.diff [git sha:83af63939768ff4cb729ff7288301eaad28edaa4 | pending]

# xpaned.based.tests.diff [git sha:449aadbb0a4634bf4ee7fe868868c2b1b33da154 | pending]

# variable.name.refactoring.diff [git sha:007e03d6f1126393c45e62c99cc47099501af093 | pending]

# simplify.logic.for.sanity.sake.diff [git sha:a94078f498b1aaa373761c4032a9c3cb275cdfa2 | pending]

# remove.variable.access.repetition.diff [git sha:a1508c5a41a7675d4643a440c37f28ef8178136c | pending]

# add.'widgetbars_enabled'.property.docstring.for.clarity.diff [git sha:d68dedfbde33ca9a63380db0adb91698d2396891 | pending]

# add.'widgetbar'.class.docstring.diff [git sha:4bf1756ef8b9a5b684f3e712bf30864691cfe5de | pending]

# remove.redundant.plugin_config_section.variable.diff [git sha:a392d03ab6fd32e4dd56573fea08b2e6fa5a2859 | pending]

# change.widgetbars.plugin.path.diff [git sha:53a1a479fc63ec3880af75d5e1ce66c024dbbc2c | pending]

# inline.some.logic.to.improve.readability.diff [git sha:b7a373092c108efb3995ab3891705dc9337cea7e | pending]

# remove.multiline.debug.statement.diff [git sha:f7dc9be1cf8daaf28720db3ff6876c4eebca9b4a | pending]

# reduce.indentation.with.cleaner.return.pattern.diff [git sha:535cecc7027a037fb4a503824af4be20f3ddbf90 | pending]

# improve.the.relatively.close.test.diff [git sha:c77888949c5a869cbe9e122c459c5918ba122df0 | pending]

# remove.superfluous.widgetbar.updating.diff [git sha:065f63cca78212550d0603f4ec6a5d90c3100f9f | pending]

# gtk.version.compatibility.diff [git sha:7c86af22d61eff1c126915641567f27c93c199a5 | pending]
-widgets don't automatically expand to fill space in their parent
as they did previously

# add.handle.position.locking.for.a.paned.child2.diff [git sha:3e4cbf9fa1c297d746b09350309cde321ac81d98 | pending]
-only where child1 isn't already locked!
-without this change, where the last pane in a MultiPaned contained a
collapsed expander, its parent pane would proportionally resize whenever
any parent paneds were resized, as opposed to it being locked into position
as we'd want with any collapsed item

# paned.handle.position.considerations.diff [git sha:4a709422382dfde796a620ab3e5fabdb21d5f269 | pending]
-fix all paned handle position calculations by adding handle size
corrections to account for 'wide handle' support in later Gtk versions
-removes the 'seemingly arbitrary' +/-5px handle positioning for collapsed
expanders, calculating the position based on size instead

# add.a.'force'.option.to.the.'css_add'.wrapper.diff [git sha:3eb6bff11620f0f67c46065f2730c5f141c42a42 | pending]
-enforce css overrides by loading as USER priority when absolutely
necessary (e.g. when a user override would compromise the resizing/
positioning calculations). doing this is no different to enforcing
styling via use of widget properties (e.g. margin) or style properties,
for which users obviously have zero influence upon

# harmonise.the.widgetbars.initial.pane.sort.order.diff [git sha:7553947c912ca095f1f4baa7ff924ccbee62feb9 | pending]
-with no sort order set, make it the same as the order without widgetbars

# update.licence.info.on.new.files.diff [git sha:8de09c1ee1c2e6a52a96e08c8580bcde90d27270 | pending]

# return.default.1x1.for.invalid.image.scaling.diff [git sha:85076f1e50e2eec5fb957dd4c4d9af7e677d0f55 | pending]

# persistent.moveable.big.images.diff [git sha:bf3969e4fed0658d0f225a1a0537a26d746293b7 | pending]
-identical single-click destroy feature as the 'POPUP' window type,
 but with extra benefits

# support.multiple.big.images.diff [git sha:d394ce2a8e86f2365bfe4e836cb1fe9b00ab8220 | pending]
-allows multiple big images to remain visible from a single CoverImage
-toggled via the config 'settings -> multiple_big_images' bool

# coverswidgetbar.plugin.diff [git sha:72cdd3f2b3584c2b1eb7b402c0998777c6834241 | pending]

# avoid.pixmap.error.diff [git sha:74b6648e09c8720f6b08a8933bce10a45e8dda6e | pending]

# center.images.on.their.cairo.surface.diff [git sha:50c66a87cdca68d95f950886529ea670b5b3c9ab | pending]

# embeddedimage,.add.size().diff [git sha:68d1f84b228bfc47c32ed103cbd6b2fa40131275 | pending]

# embeddedimage,.facilitate.partial.reads.diff [git sha:e5299619a47d71284560f93e97d1a16d1b51bc55 | pending]
-add 'no_of_bytes' param to read()

# coverswidgetbar,.add.check.to.catch.stale.embedded.art.cache.diff [git sha:4f7a7241af60d52ba8a1458966d1f3a6c80dc2e9 | pending]

# coverswidgetbar,.follow.front.option.diff [git sha:a64d4e34315ba896580fd383a9c9bde48a2d92c9 | pending]

# coverswidgetbar,.make.cover.label.more.configurable.diff [git sha:e820bc28aab1935d8573f655729fd7bfd19b6609 | pending]

# coverswidgetbar,.add.cover.size.to.tooltip.option.diff [git sha:4071b67395eba63ddf6bbc82e65017538ffa8662 | pending]

# coverswidgetbar,.add.uri.to.tooltip.option.diff [git sha:fbb35ba58c012aee1866280adcc3ccaec262d55c | pending]
-so one can discern which art is internal vs external

# coverswidgetbar,.python3.compatibility.diff [git sha:e93ee54431f9cdd0be90f8496cd9a9312761937c | pending]

# coverswidgetbar,.update.licence.info.on.new.files.diff [git sha:111e00e88673fa373d37068d92d09b03c904637b | pending]

# add.filtering.to.comboboxentrysave.widget.diff [git sha:7e07dd260f392bf55ef96d8bb4dfd1051448cc14 | pending]

# create.an.actions.dialog.diff [git sha:5903ef144a244abcb0a0fac6b6f1564af55c7bfb | pending]

# expose.pluginmanager's.scanned.modules.diff [git sha:94b1aa6bbb79dbde2db472851cc38738769400be | pending]

# pluginswidgetbar.plugin.[#2042.part].diff [git sha:3dd32f0aafd81ac426ef1c6e2e85399f4cf56188 | pending]
-part implementation of #2042 (drag and drop to follow)
-configurable actions via silly string magic in right-click 'actions'
dialog which perists preferences
-action strings can use combinations of plugin or module/class and
method names with arguments that are either known (e.g. <songs>,
<library>) or simple strings. they MUST be prefixed by either 'default'
(if you want the action to be visible to all plugins), or the plugin id
(visible only to a specific plugin)

e.g.
[lyrics]
View Lyrics | <pluginswidgetbar> | <plugin preferences>
[burn]
Burn CD | <Burn CD> | <plugin_songs> | <xfburn>
[albumart]
Download Album Art | <Download Album Art> | <plugin_album> | <songs> <library>
Download Album Art | <Download Album Art> | <plugin_album>
Download Album Art | <albumart> | <AlbumArtWindow>.<show> | <songs>
Download Album Art | <albumart> | <AlbumArtWindow>.<show>

in the latter album art cases, they all do the same thing. known
arguments are substituted if missing

there are also several default actions, namely:

default | <pluginswidgetbar> | <plugin default action>
default | <pluginswidgetbar> | <plugin toggle>
default | <pluginswidgetbar> | <plugin preferences>

<plugin default action> calls the default 'action' callback of a
plugin, which should be overridden by plugin implementors. the
default is to open the plugin's preferences pane in the preferences
dialog

# pluginswidgetbar,.add.'enabled.only'.toggle.diff [git sha:61e09b72aacf15801e8b8f5d43a004bab72a4799 | pending]

# pluginswidgetbar,.add.'show.labels'.toggle.diff [git sha:16b08625ec661598f4f63c0f33d492b364d1dbab | pending]

# pluginswidgetbar,.add.'small.icons'.toggle.diff [git sha:d2661638ee95d8973401ab07d25d36d50b04efcd | pending]

# pluginswidgetbar,.add.plugin.errors.icon.diff [git sha:3c914f03f48dfd846cb3d28d273680b73edf6fe3 | pending]

# add.'add_global_css'.wrapper.function.diff [git sha:3c97caaaa44d5b619b9be5f181dbc691f1f57896 | pending]
-add css to for current (default) screen context

# pluginswidgetbar,.add.highlight.strips.for.enabled.plugins.diff [git sha:dc07d29b89b79fe4dcb4cc764c32f178752c8222 | pending]

# burn.cd,.fascilitate.non-song-menu.initialisation.diff [git sha:0a755cee35894155ab5c49ef7339be1aeb299c17 | pending]

# pluginswidgetbar,.workaround.'bizarre.loss.of.closure.state'.diff [git sha:409f5eefb6d78887f01fe596789e4b4febebfc97 | pending]

# pluginswidgetbar,.add.drag.'n'.drop.re-ordering.of.icons.diff [git sha:c1f54296d70c5c4298643929238d9273be772af2 | pending]

-implementation note:
to try and ensure the sorted list isn't a complete list of plugins we
only care about a move in relation to existing ordered items. hence
consequently, if you've only ordered 3 of 10 items, and move pos 4 to
pos 10, it will not do anything! you would have to explicitly move
others items (5 to 10) in front of it in order to push it out to
position 10. also, moving item 10 to position 9 will thus push the
item all the way to position 4. this might look like broken behaviour,
but only when shuffling around previously unordered items. a benefit
here would be trying to order item 999 down to position 2, no
excessive drag operation would be needed, scroll to 999, move it 1
position, and it'll pop to the end of the sorted items (i.e. near the
front of the full list)

# pluginswidgetbar,.add.alpha.to.drag.icon.diff [git sha:84225d972a0e2896c9f9af922b5342e7733c255c | pending]

# pluginswidgetbar,.add.drag.scrolling.diff [git sha:1af193e987b6133ef6200c2e5048ded5fea14c38 | pending]

# pluginswidgetbar,.fix.drag.drop.on.same.icon.diff [git sha:f1ee7224cdedb64680f19be134c000d8b22c32cb | pending]

# pluginswidgetbar,.add.drag.highlights.diff [git sha:6d9f8ffc18d69362e62e4c75ea439b9e6ddf7787 | pending]

# pluginswidgetbar,.drag.'n'.drop.target.support.diff [git sha:639bb18e42ce9acf74a254719d8176f2197671c9 | pending]

# pluginswidgetbar,.improve.drag.and.drop.highlighting.diff [git sha:a5964fde5fb4642ae80a42d562531ad414feb242 | pending]
-the visual experience now makes the drop strategy very clear

# pluginswidgetbar,.python3.compatibility.diff [git sha:2c38a9865ce7bd19f102e1f7bd52fc6346144383 | pending]

# pluginswidgetbar,.update.licence.info.on.new.files.diff [git sha:23d998eebd1e26fb2533fa75c3346eaca3e63cd8 | pending]

# embedded.art.widgetbar.diff [git sha:13ccb6b272c1f3f20891d03566cdc77c8ba832e7 | pending]

# embeddedartwidgetbar,.make.icon.selectable.diff [git sha:8b66fc271471978d0d9c14cd2fdd8c4df535d366 | pending]

# embeddedartwidgetbar,.add.label.and.tooltip.options.diff [git sha:69d0286e76c74716b3c49f4edf6624eec4f6d4a4 | pending]

# core,.allow.coverimage.click.override.diff [git sha:b7834f0ecb5c685cc70a6953817d99ca127961b8 | pending]
-expose a CoverImage 'cover_click_cb' property to be set in order
to override the default button-press behaviour

# embeddedartwidgetbar,.rewire.mouse.click.events.diff [git sha:509ba2c0cd0e166c7a8dddb2a0a350ab70473caf | pending]
-override cover image button-press event to facilitate single click
selection toggle on cover image, pushing 'show_cover' to the double
click

# embeddedartwidgetbar,.add.selected.counter.diff [git sha:ce2e80dba754c89f87e2ea506cde3e717d73dcbb | pending]

# embeddedartwidgetbar,.refactor.some.variable.names.to.improve.readability.diff [git sha:5c7382be500e3d189a8719754ebf7d409e2d3df2 | pending]
 readability

-coverimage_box -> image_widget
-covers -> image_widgets
-the embeddedart box now contains widgets which can access the inner
'image_widget's via widget.image_widget

# embeddedartwidgetbar,.improve.selected.counter.diff [git sha:649657f8a610b2a16521caf7c6f84d497011a54c | pending]

# embeddedartwidgetbar,.add.clear.all.embedded.art.support.diff [git sha:11e0311afe7faddfa7886dcbb68562993f492228 | pending]

# embeddedartwidgetbar,.add.single.default.image.embedded.art.support.diff [git sha:9ce21ed3b519ca9ade1f3256cff692f5a0216b36 | pending]
 support

-this uses the built in CoverManager's 'get_cover' which
automatically collects an appropriate (hopefully) image from
either the default filesystem cover source, or else another
enabled cover source plugin, returning the first usable art
it finds

# core,.implement.'remove_image()'.for.embedded.art.diff [git sha:9aa2b91eb3776fd8a0f6e15104a9e1ea8a382185 | pending]

# embeddedartwidgetbar,.add.removal.of.embedded.art.support.diff [git sha:7e0cfce60359a8831a777951b76bfb1559d5a732 | pending]

# core,.implement.add_image().for.embedded.art.diff [git sha:e6e2547d5c0bca56369bea115ecc988bd6687057 | pending]

# embeddedartwidgetbar,.add.addition.of.embedded.art.support.diff [git sha:f28ea81a82bb29a540c9e214db6652d3c768dd54 | pending]

# embeddedartwidgetbar,.make.controls.scrollable.diff [git sha:8850b6b018b3d5d0b2f69a29406474c22f27a060 | pending]

# embeddedartwidgetbar,.collapse.embedded.art.items.based.on.image.data.hash.diff [git sha:513404384b2bb6b342e0c578a19004fd7d17e2ad | pending]

# embeddedartwidgetbar,.enable.actions.on.'no'.selection.diff [git sha:049e3022e6e04a06d803699037ee5cac40f21ed7 | pending]

# embeddedartwidgetbar,.add.selection.count.tooltips.diff [git sha:6f752a02ac482090d83dc9652755ee89a2b033e1 | pending]

# core,.ignore.strict.id3.apic.single.type.standard.diff [git sha:87e6f6b580ca95c751e12b93520c1424d79c64a2 | pending]
-requires changes to mutagen library, see pull request:
https://github.com/quodlibet/mutagen/pull/326

# core,.work.around.mutagen's.'strict'.frames.diff [git sha:893b88a7fe41c551b5580d53f2500f35195e7cac | pending]
-following rejection of mutagen #326 PR, push the logic required to
overcome the 'strict' (in terms of frame type) no duplication /
overwrites by default when adding by (the recommended) abuse of the
frame's 'desc' attribute

see:
https://github.com/quodlibet/mutagen/pull/326
https://github.com/quodlibet/mutagen/commit/6b41a636b9997a4f0016abf9213522ff99bac55a

# embeddedartwidgetbar,.add.collapsed.view.album.select.all_none.toggle.diff [git sha:6dceddb824d0883f6f39a0afa3db4af442797f04 | pending]

# embeddedartwidgetbar,.standalone.'generate_image'.refactor.diff [git sha:2a2e0f7153d70b50596dc0a397def9be8106613a | pending]

# embeddedartwidgetbar,.hash.on.image.data.only.diff [git sha:8a6921ba69df86c10697201631d00ff0a20252a9 | pending]
-avoid duplicates in cache

# embeddedartwidgetbar,.overhaul.post.action.ui.synchronisation.diff [git sha:902b77a61c3d097bf00260b3f6e1b940ee9e0463 | pending]

# embeddedartwidgetbar,.refactor.diff [git sha:5859995745312b723f9058a75157b1d2f60d69ca | pending]
-pull 'image widget' into its own 'ImageWidget' class
-in the same vein as the renamed 'EmbeddedArtBoxSignalBox', create
a companion signals class to pass messages to the container,
-refactor ImageWidget functions to use 'self' name more
