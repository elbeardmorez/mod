From ad367539b76b089651ccf702b0510b3eb77ed72d Mon Sep 17 00:00:00 2001
From: Pete Beardmore <pete.beardmore@msn.com>
Date: Sun, 5 Feb 2017 10:43:01 +0000
Subject: add key size scaling

---
 utils/vpiano/keyboardmap.h   |  3 ++
 utils/vpiano/pianokeybd.cpp  | 72 ++++++++++++++++++++++++++++++++------------
 utils/vpiano/pianokeybd.h    | 15 +++++++--
 utils/vpiano/pianoscene.cpp  | 27 ++++++++++-------
 utils/vpiano/pianoscene.h    |  3 ++
 utils/vpiano/preferences.cpp | 11 ++++++-
 utils/vpiano/preferences.h   |  3 ++
 utils/vpiano/preferences.ui  | 38 ++++++++++++++++++++++-
 utils/vpiano/vpiano.cpp      | 11 +++++--
 9 files changed, 146 insertions(+), 37 deletions(-)

diff --git a/utils/vpiano/keyboardmap.h b/utils/vpiano/keyboardmap.h
index 8a54412..30363d7 100644
--- a/utils/vpiano/keyboardmap.h
+++ b/utils/vpiano/keyboardmap.h
@@ -25,5 +25,8 @@ const int DEFAULTSTARTINGKEY = 9;
 const int DEFAULTBASEOCTAVE = 1;
 const int DEFAULTNUMBEROFKEYS = 88;
 const int KEYLABELFONTSIZE = 7;
+const int DEFAULTKEYWIDTH = 18;
+const int DEFAULTKEYHEIGHT = 72;
+const qreal DEFAULTKEYSIZESCALE = 1.0;
 
 #endif // KEYBOARDMAP_H
diff --git a/utils/vpiano/pianokeybd.cpp b/utils/vpiano/pianokeybd.cpp
index 42c48d8..4a87bb0 100644
--- a/utils/vpiano/pianokeybd.cpp
+++ b/utils/vpiano/pianokeybd.cpp
@@ -23,14 +23,21 @@ PianoKeybd::PianoKeybd(QWidget *parent)
     : QGraphicsView(parent), m_rotation(0), m_scene(NULL), m_rawMap(NULL)
 {
     initialize();
-    initScene(DEFAULTBASEOCTAVE, DEFAULTNUMBEROFKEYS, DEFAULTSTARTINGKEY);
+    initScene(DEFAULTBASEOCTAVE,
+              DEFAULTNUMBEROFKEYS,
+              DEFAULTSTARTINGKEY,
+              DEFAULTKEYSIZESCALE);
 }
 
-PianoKeybd::PianoKeybd(const int baseOctave, const int numKeys, const int startKey, QWidget *parent)
+PianoKeybd::PianoKeybd(const int baseOctave,
+                       const int numKeys,
+                       const int startKey,
+                       const qreal keySizeScale,
+                       QWidget *parent)
     : QGraphicsView(parent), m_rotation(0), m_scene(NULL), m_rawMap(NULL)
 {
     initialize();
-    initScene(baseOctave, numKeys, startKey);
+    initScene(baseOctave, numKeys, startKey, keySizeScale);
 }
 
 PianoKeybd::~PianoKeybd()
@@ -39,9 +46,9 @@ PianoKeybd::~PianoKeybd()
     setRawKeyboardMap(0);
 }
 
-void PianoKeybd::initScene(int base, int num, int strt, const QColor& c)
+void PianoKeybd::initScene(int base, int num, int strt, qreal keysizescale, const QColor& c)
 {
-    m_scene = new PianoScene(base, num, strt, c, this);
+    m_scene = new PianoScene(base, num, strt, keysizescale, c, this);
     m_scene->setKeyboardMap(&m_defaultMap);
     connect(m_scene, SIGNAL(noteOn(int,int)), SIGNAL(noteOn(int,int)));
     connect(m_scene, SIGNAL(noteOff(int,int)), SIGNAL(noteOff(int,int)));
@@ -232,25 +239,50 @@ void PianoKeybd::initDefaultMap()
     m_rawMap = &m_defaultRawMap;
 }
 
+void PianoKeybd::resetScene() {
+    int numKeys = m_scene->numKeys();
+    int startKey = m_scene->startKey();
+    qreal keySizeScale = m_scene->keySizeScale();
+    resetScene(numKeys, startKey, keySizeScale);
+}
+
+void PianoKeybd::resetScene(const int numKeys,
+                            const int startKey,
+                            const qreal keySizeScale)
+{
+    int baseOctave = m_scene->baseOctave();
+    QColor color = m_scene->getKeyPressedColor();
+    PianoHandler* handler = m_scene->getPianoHandler();
+    KeyboardMap* keyMap = m_scene->getKeyboardMap();
+    bool keyboardEnabled = m_scene->isKeyboardEnabled();
+    bool mouseEnabled = m_scene->isMouseEnabled();
+    bool touchEnabled = m_scene->isTouchEnabled();
+    delete m_scene;
+    initScene(baseOctave, numKeys, startKey, keySizeScale, color);
+    m_scene->setPianoHandler(handler);
+    m_scene->setKeyboardMap(keyMap);
+    m_scene->setKeyboardEnabled(keyboardEnabled);
+    m_scene->setMouseEnabled(mouseEnabled);
+    m_scene->setTouchEnabled(touchEnabled);
+    fitInView(m_scene->sceneRect(), Qt::KeepAspectRatio);
+}
+
 void PianoKeybd::setNumKeys(const int numKeys, const int startKey)
 {
     if ( numKeys != m_scene->numKeys() || startKey != m_scene->startKey() )
     {
-        int baseOctave = m_scene->baseOctave();
-        QColor color = m_scene->getKeyPressedColor();
-        PianoHandler* handler = m_scene->getPianoHandler();
-        KeyboardMap* keyMap = m_scene->getKeyboardMap();
-        bool keyboardEnabled = m_scene->isKeyboardEnabled();
-        bool mouseEnabled = m_scene->isMouseEnabled();
-        bool touchEnabled = m_scene->isTouchEnabled();
-        delete m_scene;
-        initScene(baseOctave, numKeys, startKey, color);
-        m_scene->setPianoHandler(handler);
-        m_scene->setKeyboardMap(keyMap);
-        m_scene->setKeyboardEnabled(keyboardEnabled);
-        m_scene->setMouseEnabled(mouseEnabled);
-        m_scene->setTouchEnabled(touchEnabled);
-        fitInView(m_scene->sceneRect(), Qt::KeepAspectRatio);
+        qreal keySizeScale = m_scene->keySizeScale();
+        resetScene(numKeys, startKey, keySizeScale);
+    }
+}
+
+void PianoKeybd::setKeySizeScale(const qreal keySizeScale)
+{
+    if ( keySizeScale != m_scene->keySizeScale() )
+    {
+        int numKeys = m_scene->numKeys();
+        int startKey = m_scene->startKey();
+        resetScene(numKeys, startKey, keySizeScale);
     }
 }
 
diff --git a/utils/vpiano/pianokeybd.h b/utils/vpiano/pianokeybd.h
index 1548f44..529e37f 100644
--- a/utils/vpiano/pianokeybd.h
+++ b/utils/vpiano/pianokeybd.h
@@ -39,6 +39,7 @@ class QDESIGNER_WIDGET_EXPORT PianoKeybd : public QGraphicsView
     Q_OBJECT
     Q_PROPERTY( int baseOctave READ baseOctave WRITE setBaseOctave )
     Q_PROPERTY( int numKeys READ numKeys WRITE setNumKeys )
+    Q_PROPERTY( int keySizeScale READ keySizeScale WRITE setKeySizeScale )
     Q_PROPERTY( int rotation READ getRotation WRITE setRotation )
     Q_PROPERTY( QColor keyPressedColor READ getKeyPressedColor WRITE setKeyPressedColor )
     Q_PROPERTY( bool showLabels READ showLabels WRITE setShowLabels )
@@ -51,14 +52,24 @@ class QDESIGNER_WIDGET_EXPORT PianoKeybd : public QGraphicsView
 #endif
 public:
     PianoKeybd(QWidget *parent = 0);
-    PianoKeybd(const int baseOctave, const int numKeys, const int startKey, QWidget *parent = 0);
+    PianoKeybd(const int baseOctave,
+               const int numKeys,
+               const int startKey,
+               const qreal keySizeScale,
+               QWidget *parent = 0);
     virtual ~PianoKeybd();
 
+    void resetScene();
+    void resetScene(const int numKeys,
+                    const int startKey,
+                    const qreal keySizeScale);
     int baseOctave() const { return m_scene->baseOctave(); }
     void setBaseOctave(const int baseOctave) { m_scene->setBaseOctave(baseOctave); }
     int numKeys() const { return m_scene->numKeys(); }
     int startKey() const { return m_scene->startKey(); }
     void setNumKeys(const int numKeys, const int startKey = DEFAULTSTARTINGKEY);
+    qreal keySizeScale() const { return m_scene->keySizeScale(); }
+    void setKeySizeScale(const qreal keySizeScale);
     int getRotation() const { return m_rotation; }
     void setRotation(int r);
     QColor getKeyPressedColor() const { return m_scene->getKeyPressedColor(); }
@@ -90,7 +101,7 @@ signals:
 protected:
     void initialize();
     void initDefaultMap();
-    void initScene(int base, int num, int ini, const QColor& c = QColor());
+    void initScene(int base, int num, int ini, qreal keysizescale, const QColor& c = QColor());
     void resizeEvent(QResizeEvent *event);
 
 private:
diff --git a/utils/vpiano/pianoscene.cpp b/utils/vpiano/pianoscene.cpp
index 0d33667..2248e1f 100644
--- a/utils/vpiano/pianoscene.cpp
+++ b/utils/vpiano/pianoscene.cpp
@@ -27,22 +27,22 @@
 #include <qmath.h>
 #include <QDebug>
 
-#define KEYWIDTH  18
-#define KEYHEIGHT 72
 
 static qreal sceneWidth(int keys) {
-    return KEYWIDTH * qCeil( keys * 7.0 / 12.0 );
+    return DEFAULTKEYWIDTH * qCeil( keys * 7.0 / 12.0 );
 }
 
 PianoScene::PianoScene ( const int baseOctave,
                          const int numKeys,
                          const int startKey,
+                         const qreal keySizeScale,
                          const QColor& keyPressedColor,
                          QObject * parent )
-    : QGraphicsScene( QRectF(0, 0, sceneWidth(numKeys), KEYHEIGHT), parent ),
+    : QGraphicsScene( QRectF(0, 0, sceneWidth(numKeys), DEFAULTKEYHEIGHT * keySizeScale), parent ),
     m_baseOctave( baseOctave ),
     m_numKeys( numKeys ),
     m_startKey( startKey ),
+    m_keySizeScale( keySizeScale ),
     m_minNote( 0 ),
     m_maxNote( 127 ),
     m_transpose( 0 ),
@@ -79,18 +79,18 @@ PianoScene::PianoScene ( const int baseOctave,
         int j = i % 12;
         if (j >= 5) j++;
         if ((j % 2) == 0) {
-            x = (ocs + qFloor((j-adj) / 2.0)) * KEYWIDTH;
-            key = new PianoKey( QRectF(x, 0, KEYWIDTH, KEYHEIGHT), false, i );
+            x = (ocs + qFloor((j-adj) / 2.0)) * DEFAULTKEYWIDTH;
+            key = new PianoKey( QRectF(x, 0, DEFAULTKEYWIDTH, DEFAULTKEYHEIGHT * keySizeScale), false, i );
             lbl = new KeyLabel(key);
             lbl->setDefaultTextColor(Qt::black);
-            lbl->setPos(x, KEYHEIGHT);
+            lbl->setPos(x, DEFAULTKEYHEIGHT * keySizeScale);
         } else {
-            x = (ocs + qFloor((j-adj) / 2.0)) * KEYWIDTH + KEYWIDTH * 6/10 + 1;
-            key = new PianoKey( QRectF( x, 0, KEYWIDTH * 8/10 - 1, KEYHEIGHT * 6/10 ), true, i );
+            x = (ocs + qFloor((j-adj) / 2.0)) * DEFAULTKEYWIDTH + DEFAULTKEYWIDTH * 6/10 + 1;
+            key = new PianoKey( QRectF( x, 0, DEFAULTKEYWIDTH * 8/10 - 1, DEFAULTKEYHEIGHT * 6/10 * keySizeScale), true, i );
             key->setZValue( 1 );
             lbl = new KeyLabel(key);
             lbl->setDefaultTextColor(Qt::white);
-            lbl->setPos(x - 3, KEYHEIGHT * 6/10 - 3);
+            lbl->setPos(x - 3, (DEFAULTKEYHEIGHT * 6/10 - 3) * keySizeScale);
         }
         //qDebug() << "i=" << i << "ocs=" << ocs << "j=" << j << "x=" << x;
         key->setAcceptTouchEvents(true);
@@ -107,7 +107,7 @@ PianoScene::PianoScene ( const int baseOctave,
 
 QSize PianoScene::sizeHint() const
 {
-    return QSize(sceneWidth(m_numKeys), KEYHEIGHT);
+    return QSize(sceneWidth(m_numKeys), DEFAULTKEYHEIGHT * keySizeScale());
 }
 
 void PianoScene::showKeyOn( PianoKey* key, QColor color, int vel )
@@ -498,6 +498,11 @@ void PianoScene::refreshLabels()
     foreach(KeyLabel* lbl, m_labels) {
         PianoKey* key = dynamic_cast<PianoKey*>(lbl->parentItem());
         if(key != NULL) {
+            if (key->getType() == 1) {
+               lbl->setY((DEFAULTKEYHEIGHT * 6/10 - 3) * m_keySizeScale);
+            } else {
+               lbl->setY(DEFAULTKEYHEIGHT * m_keySizeScale);
+            }
             lbl->setHtml(noteName(key->getNote()));
             lbl->setVisible(m_showLabels);
         }
diff --git a/utils/vpiano/pianoscene.h b/utils/vpiano/pianoscene.h
index fb00dfe..700d084 100644
--- a/utils/vpiano/pianoscene.h
+++ b/utils/vpiano/pianoscene.h
@@ -45,6 +45,7 @@ public:
     PianoScene ( const int baseOctave, 
                  const int numKeys,
                  const int startKey,
+                 const qreal keySizeScale,
                  const QColor& keyPressedColor = QColor(),
                  QObject * parent = 0 );
     
@@ -91,6 +92,7 @@ public:
     void setBaseOctave( const int base );
     int numKeys() const { return m_numKeys; }
     int startKey() const { return m_startKey; }
+    qreal keySizeScale() const { return m_keySizeScale; }
     void allKeysOff();
     void keyOn( const int note );
     void keyOff( const int note );
@@ -139,6 +141,7 @@ private:
     int m_baseOctave;
     int m_numKeys;
     int m_startKey;
+    qreal m_keySizeScale;
     int m_minNote;
     int m_maxNote;
     int m_transpose;
diff --git a/utils/vpiano/preferences.cpp b/utils/vpiano/preferences.cpp
index c90b66f..3e0d214 100644
--- a/utils/vpiano/preferences.cpp
+++ b/utils/vpiano/preferences.cpp
@@ -28,7 +28,8 @@ Preferences::Preferences(QWidget *parent)
     m_velocity(100),
     m_baseOctave(1),
     m_numKeys(88),
-    m_startingKey(9)
+    m_startingKey(9),
+    m_keySizeScale(1.0)
 {
     ui.setupUi( this );
     connect(ui.buttonBox, SIGNAL(clicked(QAbstractButton*)), SLOT(slotButtonClicked(QAbstractButton*)));
@@ -50,6 +51,7 @@ void Preferences::showEvent ( QShowEvent *event )
         ui.spinBaseOctave->setValue( m_baseOctave );
         ui.spinNumKeys->setValue( m_numKeys );
         ui.comboNotes->setCurrentIndex( m_startingKey );
+        ui.spinKeySizeScale->setValue( m_keySizeScale );
     }
 }
 
@@ -61,6 +63,7 @@ void Preferences::apply()
     m_baseOctave = ui.spinBaseOctave->value();
     m_numKeys = ui.spinNumKeys->value();
     m_startingKey = ui.comboNotes->currentIndex();
+    m_keySizeScale = ui.spinKeySizeScale->value();
 }
 
 void Preferences::accept()
@@ -104,3 +107,9 @@ void Preferences::setStartingKey(const int key)
     m_startingKey = key;
     ui.comboNotes->setCurrentIndex(m_startingKey);
 }
+
+void Preferences::setKeySizeScale(const qreal keySizeScale)
+{
+    m_keySizeScale = keySizeScale;
+    ui.spinKeySizeScale->setValue(m_keySizeScale);
+}
diff --git a/utils/vpiano/preferences.h b/utils/vpiano/preferences.h
index 5296aaa..0426b25 100644
--- a/utils/vpiano/preferences.h
+++ b/utils/vpiano/preferences.h
@@ -36,6 +36,7 @@ public:
     void setBaseOctave(const int octave);
     void setNumKeys(const int keys);
     void setStartingKey(const int key);
+    void setKeySizeScale(const qreal keySizeScale);
 
     int getInChannel() const { return m_inChannel; }
     int getOutChannel() const { return m_outChannel; }
@@ -43,6 +44,7 @@ public:
     int getBaseOctave() const { return m_baseOctave; }
     int getNumKeys() const { return m_numKeys; }
     int getStartingKey() const { return m_startingKey; }
+    qreal getKeySizeScale() const { return m_keySizeScale; }
 
     void apply();
 
@@ -61,6 +63,7 @@ private:
     int m_baseOctave;
     int m_numKeys;
     int m_startingKey;
+    qreal m_keySizeScale;
 };
 
 #endif // PREFERENCES_H
diff --git a/utils/vpiano/preferences.ui b/utils/vpiano/preferences.ui
index b161f72..b281db3 100644
--- a/utils/vpiano/preferences.ui
+++ b/utils/vpiano/preferences.ui
@@ -105,7 +105,7 @@
      </property>
     </widget>
    </item>
-   <item row="6" column="0" colspan="4">
+   <item row="7" column="0" colspan="4">
     <widget class="QDialogButtonBox" name="buttonBox">
      <property name="standardButtons">
       <set>QDialogButtonBox::Apply|QDialogButtonBox::Cancel|QDialogButtonBox::Ok</set>
@@ -234,6 +234,41 @@
      </item>
     </widget>
    </item>
+   <item row="6" column="0" colspan="2">
+    <widget class="QLabel" name="lblKeySizeScale">
+     <property name="sizePolicy">
+      <sizepolicy hsizetype="Expanding" vsizetype="Expanding">
+       <horstretch>0</horstretch>
+       <verstretch>0</verstretch>
+      </sizepolicy>
+     </property>
+     <property name="text">
+      <string>Key Size Scale</string>
+     </property>
+     <property name="buddy">
+      <cstring>spinKeySizeScale</cstring>
+     </property>
+    </widget>
+   </item>
+   <item row="6" column="2">
+    <widget class="QDoubleSpinBox" name="spinKeySizeScale">
+     <property name="minimum">
+      <double>0.5</double>
+     </property>
+     <property name="maximum">
+      <double>5.0</double>
+     </property>
+     <property name="decimals">
+      <number>1</number>
+     </property>
+     <property name="singleStep">
+      <double>0.1</double>
+     </property>
+     <property name="value">
+      <double>1.0</double>
+     </property>
+    </widget>
+   </item>
   </layout>
  </widget>
  <layoutdefault spacing="6" margin="11"/>
@@ -244,6 +279,7 @@
   <tabstop>spinBaseOctave</tabstop>
   <tabstop>spinNumKeys</tabstop>
   <tabstop>comboNotes</tabstop>
+  <tabstop>spinKeySizeScale</tabstop>
   <tabstop>buttonBox</tabstop>
  </tabstops>
  <resources/>
diff --git a/utils/vpiano/vpiano.cpp b/utils/vpiano/vpiano.cpp
index 0eb643c..c5d1f1b 100644
--- a/utils/vpiano/vpiano.cpp
+++ b/utils/vpiano/vpiano.cpp
@@ -178,6 +178,9 @@ void VPiano::slotPreferences()
         if (ui.pianokeybd->startKey() != dlgPreferences.getStartingKey()) {
             ui.pianokeybd->setNumKeys(dlgPreferences.getNumKeys(), dlgPreferences.getStartingKey());
         }
+        if (ui.pianokeybd->keySizeScale() != dlgPreferences.getKeySizeScale()) {
+            ui.pianokeybd->setKeySizeScale(dlgPreferences.getKeySizeScale());
+        }
     }
 }
 
@@ -213,6 +216,7 @@ void VPiano::writeSettings()
     settings.setValue("baseOctave", dlgPreferences.getBaseOctave());
     settings.setValue("numKeys", dlgPreferences.getNumKeys());
     settings.setValue("startingKey", dlgPreferences.getStartingKey());
+    settings.setValue("keySizeScale", QString::number(dlgPreferences.getKeySizeScale(), 'f', 1));
     settings.endGroup();
 
     settings.sync();
@@ -243,8 +247,11 @@ void VPiano::readSettings()
     dlgPreferences.setBaseOctave(settings.value("baseOctave", 1).toInt());
     dlgPreferences.setNumKeys(settings.value("numKeys", 88).toInt());
     dlgPreferences.setStartingKey(settings.value("startingKey", 9).toInt());
-    ui.pianokeybd->setBaseOctave(settings.value("baseOctave", 1).toInt());
-    ui.pianokeybd->setNumKeys(settings.value("numKeys", 88).toInt(), settings.value("startingKey", 9).toInt());
+    dlgPreferences.setKeySizeScale(settings.value("keySizeScale", 1.0).toDouble());
+    ui.pianokeybd->setBaseOctave(dlgPreferences.getBaseOctave());
+    ui.pianokeybd->resetScene(dlgPreferences.getNumKeys(),
+                              dlgPreferences.getStartingKey(),
+                              dlgPreferences.getKeySizeScale());
     settings.endGroup();
 }
 
-- 
1.8.4

